/* soapC.cpp
   Generated by gSOAP 2.8.25 from Demo_soap.h

gSOAP XML Web services tools
Copyright (C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.25 2017-06-27 07:44:00 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_long:
		return soap_in_long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_ns__getInfo:
		return soap_in_ns__getInfo(soap, NULL, NULL, "ns:getInfo");
	case SOAP_TYPE_ns__Detectinfo:
		return soap_in_ns__Detectinfo(soap, NULL, NULL, "ns:Detectinfo");
	case SOAP_TYPE_xsd_StationInfo:
		return soap_in_xsd_StationInfo(soap, NULL, NULL, "xsd-StationInfo");
	case SOAP_TYPE_StationInfo:
		return soap_in_StationInfo(soap, NULL, NULL, "StationInfo");
	case SOAP_TYPE_S_StationInfo:
		return soap_in_S_StationInfo(soap, NULL, NULL, "S-StationInfo");
	case SOAP_TYPE_ArrayOfStationInfo:
		return soap_in_ArrayOfStationInfo(soap, NULL, NULL, "ns:StationInfo");
	case SOAP_TYPE_S_ArrayOfStationInfo:
		return soap_in_S_ArrayOfStationInfo(soap, NULL, NULL, "ns:StationInfo");
	case SOAP_TYPE_ns__StationInfo:
		return soap_in_ns__StationInfo(soap, NULL, NULL, "ns:StationInfo");
	case SOAP_TYPE_xsd_ErrorTypeInfo:
		return soap_in_xsd_ErrorTypeInfo(soap, NULL, NULL, "xsd-ErrorTypeInfo");
	case SOAP_TYPE_ErrorTypeInfo:
		return soap_in_ErrorTypeInfo(soap, NULL, NULL, "ErrorTypeInfo");
	case SOAP_TYPE_S_ErrorTypeInfo:
		return soap_in_S_ErrorTypeInfo(soap, NULL, NULL, "S-ErrorTypeInfo");
	case SOAP_TYPE_ArrayOfErrorTypeInfo:
		return soap_in_ArrayOfErrorTypeInfo(soap, NULL, NULL, "ns:ErrorTypeInfo");
	case SOAP_TYPE_S_ArrayOfErrorTypeInfo:
		return soap_in_S_ArrayOfErrorTypeInfo(soap, NULL, NULL, "ns:ErrorTypeInfo");
	case SOAP_TYPE_ns__ErrorTypeInfo:
		return soap_in_ns__ErrorTypeInfo(soap, NULL, NULL, "ns:ErrorTypeInfo");
	case SOAP_TYPE_xsd_CameraInfo:
		return soap_in_xsd_CameraInfo(soap, NULL, NULL, "xsd-CameraInfo");
	case SOAP_TYPE_CameraInfo:
		return soap_in_CameraInfo(soap, NULL, NULL, "CameraInfo");
	case SOAP_TYPE_S_CameraInfo:
		return soap_in_S_CameraInfo(soap, NULL, NULL, "S-CameraInfo");
	case SOAP_TYPE_ArrayOfCameraInfo:
		return soap_in_ArrayOfCameraInfo(soap, NULL, NULL, "ns:CameraInfo");
	case SOAP_TYPE_S_ArrayOfCameraInfo:
		return soap_in_S_ArrayOfCameraInfo(soap, NULL, NULL, "ns:CameraInfo");
	case SOAP_TYPE_ns__CameraInfo:
		return soap_in_ns__CameraInfo(soap, NULL, NULL, "ns:CameraInfo");
	case SOAP_TYPE_PointerTons__Detectinfo:
		return soap_in_PointerTons__Detectinfo(soap, NULL, NULL, "ns:Detectinfo");
	case SOAP_TYPE_PointerToPointerTons__StationInfo:
		return soap_in_PointerToPointerTons__StationInfo(soap, NULL, NULL, "ns:StationInfo");
	case SOAP_TYPE_PointerTons__StationInfo:
		return soap_in_PointerTons__StationInfo(soap, NULL, NULL, "ns:StationInfo");
	case SOAP_TYPE_PointerToPointerTons__ErrorTypeInfo:
		return soap_in_PointerToPointerTons__ErrorTypeInfo(soap, NULL, NULL, "ns:ErrorTypeInfo");
	case SOAP_TYPE_PointerTons__ErrorTypeInfo:
		return soap_in_PointerTons__ErrorTypeInfo(soap, NULL, NULL, "ns:ErrorTypeInfo");
	case SOAP_TYPE_PointerToPointerTons__CameraInfo:
		return soap_in_PointerToPointerTons__CameraInfo(soap, NULL, NULL, "ns:CameraInfo");
	case SOAP_TYPE_PointerTons__CameraInfo:
		return soap_in_PointerTons__CameraInfo(soap, NULL, NULL, "ns:CameraInfo");
	case SOAP_TYPE_xsd__string:
	{	char **s;
		s = soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_long;
			return soap_in_long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getInfo"))
		{	*type = SOAP_TYPE_ns__getInfo;
			return soap_in_ns__getInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Detectinfo"))
		{	*type = SOAP_TYPE_ns__Detectinfo;
			return soap_in_ns__Detectinfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd-StationInfo"))
		{	*type = SOAP_TYPE_xsd_StationInfo;
			return soap_in_xsd_StationInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "StationInfo"))
		{	*type = SOAP_TYPE_StationInfo;
			return soap_in_StationInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "S-StationInfo"))
		{	*type = SOAP_TYPE_S_StationInfo;
			return soap_in_S_StationInfo(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns:StationInfo"))
		{	*type = SOAP_TYPE_ArrayOfStationInfo;
			return soap_in_ArrayOfStationInfo(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns:StationInfo"))
		{	*type = SOAP_TYPE_S_ArrayOfStationInfo;
			return soap_in_S_ArrayOfStationInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:StationInfo"))
		{	*type = SOAP_TYPE_ns__StationInfo;
			return soap_in_ns__StationInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd-ErrorTypeInfo"))
		{	*type = SOAP_TYPE_xsd_ErrorTypeInfo;
			return soap_in_xsd_ErrorTypeInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ErrorTypeInfo"))
		{	*type = SOAP_TYPE_ErrorTypeInfo;
			return soap_in_ErrorTypeInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "S-ErrorTypeInfo"))
		{	*type = SOAP_TYPE_S_ErrorTypeInfo;
			return soap_in_S_ErrorTypeInfo(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns:ErrorTypeInfo"))
		{	*type = SOAP_TYPE_ArrayOfErrorTypeInfo;
			return soap_in_ArrayOfErrorTypeInfo(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns:ErrorTypeInfo"))
		{	*type = SOAP_TYPE_S_ArrayOfErrorTypeInfo;
			return soap_in_S_ArrayOfErrorTypeInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:ErrorTypeInfo"))
		{	*type = SOAP_TYPE_ns__ErrorTypeInfo;
			return soap_in_ns__ErrorTypeInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd-CameraInfo"))
		{	*type = SOAP_TYPE_xsd_CameraInfo;
			return soap_in_xsd_CameraInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "CameraInfo"))
		{	*type = SOAP_TYPE_CameraInfo;
			return soap_in_CameraInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "S-CameraInfo"))
		{	*type = SOAP_TYPE_S_CameraInfo;
			return soap_in_S_CameraInfo(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns:CameraInfo"))
		{	*type = SOAP_TYPE_ArrayOfCameraInfo;
			return soap_in_ArrayOfCameraInfo(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns:CameraInfo"))
		{	*type = SOAP_TYPE_S_ArrayOfCameraInfo;
			return soap_in_S_ArrayOfCameraInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:CameraInfo"))
		{	*type = SOAP_TYPE_ns__CameraInfo;
			return soap_in_ns__CameraInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_xsd__string;
			s = soap_in_xsd__string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_xsd__int:
		return soap_out_xsd__int(soap, tag, id, (const long *)ptr, "xsd:int");
	case SOAP_TYPE_long:
		return soap_out_long(soap, tag, id, (const long *)ptr, "xsd:long");
	case SOAP_TYPE_ns__getInfo:
		return soap_out_ns__getInfo(soap, tag, id, (const struct ns__getInfo *)ptr, "ns:getInfo");
	case SOAP_TYPE_ns__Detectinfo:
		return soap_out_ns__Detectinfo(soap, tag, id, (const struct ns__Detectinfo *)ptr, "ns:Detectinfo");
	case SOAP_TYPE_xsd_StationInfo:
		return soap_out_xsd_StationInfo(soap, tag, id, (const struct S_StationInfo *)ptr, "xsd-StationInfo");
	case SOAP_TYPE_StationInfo:
		return soap_out_StationInfo(soap, tag, id, (const struct S_StationInfo *)ptr, "StationInfo");
	case SOAP_TYPE_S_StationInfo:
		return soap_out_S_StationInfo(soap, tag, id, (const struct S_StationInfo *)ptr, "S-StationInfo");
	case SOAP_TYPE_ArrayOfStationInfo:
		return soap_out_ArrayOfStationInfo(soap, tag, id, (const struct S_ArrayOfStationInfo *)ptr, "ns:StationInfo");
	case SOAP_TYPE_S_ArrayOfStationInfo:
		return soap_out_S_ArrayOfStationInfo(soap, tag, id, (const struct S_ArrayOfStationInfo *)ptr, "ns:StationInfo");
	case SOAP_TYPE_ns__StationInfo:
		return soap_out_ns__StationInfo(soap, tag, id, (const struct ns__StationInfo *)ptr, "ns:StationInfo");
	case SOAP_TYPE_xsd_ErrorTypeInfo:
		return soap_out_xsd_ErrorTypeInfo(soap, tag, id, (const struct S_ErrorTypeInfo *)ptr, "xsd-ErrorTypeInfo");
	case SOAP_TYPE_ErrorTypeInfo:
		return soap_out_ErrorTypeInfo(soap, tag, id, (const struct S_ErrorTypeInfo *)ptr, "ErrorTypeInfo");
	case SOAP_TYPE_S_ErrorTypeInfo:
		return soap_out_S_ErrorTypeInfo(soap, tag, id, (const struct S_ErrorTypeInfo *)ptr, "S-ErrorTypeInfo");
	case SOAP_TYPE_ArrayOfErrorTypeInfo:
		return soap_out_ArrayOfErrorTypeInfo(soap, tag, id, (const struct S_ArrayOfErrorTypeInfo *)ptr, "ns:ErrorTypeInfo");
	case SOAP_TYPE_S_ArrayOfErrorTypeInfo:
		return soap_out_S_ArrayOfErrorTypeInfo(soap, tag, id, (const struct S_ArrayOfErrorTypeInfo *)ptr, "ns:ErrorTypeInfo");
	case SOAP_TYPE_ns__ErrorTypeInfo:
		return soap_out_ns__ErrorTypeInfo(soap, tag, id, (const struct ns__ErrorTypeInfo *)ptr, "ns:ErrorTypeInfo");
	case SOAP_TYPE_xsd_CameraInfo:
		return soap_out_xsd_CameraInfo(soap, tag, id, (const struct S_CameraInfo *)ptr, "xsd-CameraInfo");
	case SOAP_TYPE_CameraInfo:
		return soap_out_CameraInfo(soap, tag, id, (const struct S_CameraInfo *)ptr, "CameraInfo");
	case SOAP_TYPE_S_CameraInfo:
		return soap_out_S_CameraInfo(soap, tag, id, (const struct S_CameraInfo *)ptr, "S-CameraInfo");
	case SOAP_TYPE_ArrayOfCameraInfo:
		return soap_out_ArrayOfCameraInfo(soap, tag, id, (const struct S_ArrayOfCameraInfo *)ptr, "ns:CameraInfo");
	case SOAP_TYPE_S_ArrayOfCameraInfo:
		return soap_out_S_ArrayOfCameraInfo(soap, tag, id, (const struct S_ArrayOfCameraInfo *)ptr, "ns:CameraInfo");
	case SOAP_TYPE_ns__CameraInfo:
		return soap_out_ns__CameraInfo(soap, tag, id, (const struct ns__CameraInfo *)ptr, "ns:CameraInfo");
	case SOAP_TYPE_PointerTons__Detectinfo:
		return soap_out_PointerTons__Detectinfo(soap, tag, id, (struct ns__Detectinfo *const*)ptr, "ns:Detectinfo");
	case SOAP_TYPE_PointerToPointerTons__StationInfo:
		return soap_out_PointerToPointerTons__StationInfo(soap, tag, id, (struct ns__StationInfo **const*)ptr, "ns:StationInfo");
	case SOAP_TYPE_PointerTons__StationInfo:
		return soap_out_PointerTons__StationInfo(soap, tag, id, (struct ns__StationInfo *const*)ptr, "ns:StationInfo");
	case SOAP_TYPE_PointerToPointerTons__ErrorTypeInfo:
		return soap_out_PointerToPointerTons__ErrorTypeInfo(soap, tag, id, (struct ns__ErrorTypeInfo **const*)ptr, "ns:ErrorTypeInfo");
	case SOAP_TYPE_PointerTons__ErrorTypeInfo:
		return soap_out_PointerTons__ErrorTypeInfo(soap, tag, id, (struct ns__ErrorTypeInfo *const*)ptr, "ns:ErrorTypeInfo");
	case SOAP_TYPE_PointerToPointerTons__CameraInfo:
		return soap_out_PointerToPointerTons__CameraInfo(soap, tag, id, (struct ns__CameraInfo **const*)ptr, "ns:CameraInfo");
	case SOAP_TYPE_PointerTons__CameraInfo:
		return soap_out_PointerTons__CameraInfo(soap, tag, id, (struct ns__CameraInfo *const*)ptr, "ns:CameraInfo");
	case SOAP_TYPE_xsd__string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns__getInfo:
		soap_serialize_ns__getInfo(soap, (const struct ns__getInfo *)ptr);
		break;
	case SOAP_TYPE_ns__Detectinfo:
		soap_serialize_ns__Detectinfo(soap, (const struct ns__Detectinfo *)ptr);
		break;
	case SOAP_TYPE_xsd_StationInfo:
		soap_serialize_xsd_StationInfo(soap, (const struct S_StationInfo *)ptr);
		break;
	case SOAP_TYPE_StationInfo:
		soap_serialize_StationInfo(soap, (const struct S_StationInfo *)ptr);
		break;
	case SOAP_TYPE_S_StationInfo:
		soap_serialize_S_StationInfo(soap, (const struct S_StationInfo *)ptr);
		break;
	case SOAP_TYPE_ArrayOfStationInfo:
		soap_serialize_ArrayOfStationInfo(soap, (const struct S_ArrayOfStationInfo *)ptr);
		break;
	case SOAP_TYPE_S_ArrayOfStationInfo:
		soap_serialize_S_ArrayOfStationInfo(soap, (const struct S_ArrayOfStationInfo *)ptr);
		break;
	case SOAP_TYPE_ns__StationInfo:
		soap_serialize_ns__StationInfo(soap, (const struct ns__StationInfo *)ptr);
		break;
	case SOAP_TYPE_xsd_ErrorTypeInfo:
		soap_serialize_xsd_ErrorTypeInfo(soap, (const struct S_ErrorTypeInfo *)ptr);
		break;
	case SOAP_TYPE_ErrorTypeInfo:
		soap_serialize_ErrorTypeInfo(soap, (const struct S_ErrorTypeInfo *)ptr);
		break;
	case SOAP_TYPE_S_ErrorTypeInfo:
		soap_serialize_S_ErrorTypeInfo(soap, (const struct S_ErrorTypeInfo *)ptr);
		break;
	case SOAP_TYPE_ArrayOfErrorTypeInfo:
		soap_serialize_ArrayOfErrorTypeInfo(soap, (const struct S_ArrayOfErrorTypeInfo *)ptr);
		break;
	case SOAP_TYPE_S_ArrayOfErrorTypeInfo:
		soap_serialize_S_ArrayOfErrorTypeInfo(soap, (const struct S_ArrayOfErrorTypeInfo *)ptr);
		break;
	case SOAP_TYPE_ns__ErrorTypeInfo:
		soap_serialize_ns__ErrorTypeInfo(soap, (const struct ns__ErrorTypeInfo *)ptr);
		break;
	case SOAP_TYPE_xsd_CameraInfo:
		soap_serialize_xsd_CameraInfo(soap, (const struct S_CameraInfo *)ptr);
		break;
	case SOAP_TYPE_CameraInfo:
		soap_serialize_CameraInfo(soap, (const struct S_CameraInfo *)ptr);
		break;
	case SOAP_TYPE_S_CameraInfo:
		soap_serialize_S_CameraInfo(soap, (const struct S_CameraInfo *)ptr);
		break;
	case SOAP_TYPE_ArrayOfCameraInfo:
		soap_serialize_ArrayOfCameraInfo(soap, (const struct S_ArrayOfCameraInfo *)ptr);
		break;
	case SOAP_TYPE_S_ArrayOfCameraInfo:
		soap_serialize_S_ArrayOfCameraInfo(soap, (const struct S_ArrayOfCameraInfo *)ptr);
		break;
	case SOAP_TYPE_ns__CameraInfo:
		soap_serialize_ns__CameraInfo(soap, (const struct ns__CameraInfo *)ptr);
		break;
	case SOAP_TYPE_PointerTons__Detectinfo:
		soap_serialize_PointerTons__Detectinfo(soap, (struct ns__Detectinfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons__StationInfo:
		soap_serialize_PointerToPointerTons__StationInfo(soap, (struct ns__StationInfo **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__StationInfo:
		soap_serialize_PointerTons__StationInfo(soap, (struct ns__StationInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons__ErrorTypeInfo:
		soap_serialize_PointerToPointerTons__ErrorTypeInfo(soap, (struct ns__ErrorTypeInfo **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__ErrorTypeInfo:
		soap_serialize_PointerTons__ErrorTypeInfo(soap, (struct ns__ErrorTypeInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons__CameraInfo:
		soap_serialize_PointerToPointerTons__CameraInfo(soap, (struct ns__CameraInfo **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__CameraInfo:
		soap_serialize_PointerTons__CameraInfo(soap, (struct ns__CameraInfo *const*)ptr);
		break;
	case SOAP_TYPE_xsd__string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_ns__CameraInfo:
		return (void*)soap_instantiate_ns__CameraInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_S_ArrayOfCameraInfo:
		return (void*)soap_instantiate_S_ArrayOfCameraInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_S_CameraInfo:
		return (void*)soap_instantiate_S_CameraInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__ErrorTypeInfo:
		return (void*)soap_instantiate_ns__ErrorTypeInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_S_ArrayOfErrorTypeInfo:
		return (void*)soap_instantiate_S_ArrayOfErrorTypeInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_S_ErrorTypeInfo:
		return (void*)soap_instantiate_S_ErrorTypeInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__StationInfo:
		return (void*)soap_instantiate_ns__StationInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_S_ArrayOfStationInfo:
		return (void*)soap_instantiate_S_ArrayOfStationInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_S_StationInfo:
		return (void*)soap_instantiate_S_StationInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Detectinfo:
		return (void*)soap_instantiate_ns__Detectinfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getInfo:
		return (void*)soap_instantiate_ns__getInfo(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_ArrayOfCameraInfo:
		return (void*)soap_instantiate_ArrayOfCameraInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_CameraInfo:
		return (void*)soap_instantiate_CameraInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd_CameraInfo:
		return (void*)soap_instantiate_xsd_CameraInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ArrayOfErrorTypeInfo:
		return (void*)soap_instantiate_ArrayOfErrorTypeInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ErrorTypeInfo:
		return (void*)soap_instantiate_ErrorTypeInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd_ErrorTypeInfo:
		return (void*)soap_instantiate_xsd_ErrorTypeInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ArrayOfStationInfo:
		return (void*)soap_instantiate_ArrayOfStationInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_StationInfo:
		return (void*)soap_instantiate_StationInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd_StationInfo:
		return (void*)soap_instantiate_xsd_StationInfo(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ns__CameraInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__CameraInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__CameraInfo*>(p->ptr));
		break;
	case SOAP_TYPE_S_ArrayOfCameraInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct S_ArrayOfCameraInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct S_ArrayOfCameraInfo*>(p->ptr));
		break;
	case SOAP_TYPE_S_CameraInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct S_CameraInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct S_CameraInfo*>(p->ptr));
		break;
	case SOAP_TYPE_ns__ErrorTypeInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__ErrorTypeInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__ErrorTypeInfo*>(p->ptr));
		break;
	case SOAP_TYPE_S_ArrayOfErrorTypeInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct S_ArrayOfErrorTypeInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct S_ArrayOfErrorTypeInfo*>(p->ptr));
		break;
	case SOAP_TYPE_S_ErrorTypeInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct S_ErrorTypeInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct S_ErrorTypeInfo*>(p->ptr));
		break;
	case SOAP_TYPE_ns__StationInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__StationInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__StationInfo*>(p->ptr));
		break;
	case SOAP_TYPE_S_ArrayOfStationInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct S_ArrayOfStationInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct S_ArrayOfStationInfo*>(p->ptr));
		break;
	case SOAP_TYPE_S_StationInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct S_StationInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct S_StationInfo*>(p->ptr));
		break;
	case SOAP_TYPE_ns__Detectinfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__Detectinfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__Detectinfo*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getInfo*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	case SOAP_TYPE_ArrayOfCameraInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct S_ArrayOfCameraInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct S_ArrayOfCameraInfo*>(p->ptr));
		break;
	case SOAP_TYPE_CameraInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct S_CameraInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct S_CameraInfo*>(p->ptr));
		break;
	case SOAP_TYPE_xsd_CameraInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct S_CameraInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct S_CameraInfo*>(p->ptr));
		break;
	case SOAP_TYPE_ArrayOfErrorTypeInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct S_ArrayOfErrorTypeInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct S_ArrayOfErrorTypeInfo*>(p->ptr));
		break;
	case SOAP_TYPE_ErrorTypeInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct S_ErrorTypeInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct S_ErrorTypeInfo*>(p->ptr));
		break;
	case SOAP_TYPE_xsd_ErrorTypeInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct S_ErrorTypeInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct S_ErrorTypeInfo*>(p->ptr));
		break;
	case SOAP_TYPE_ArrayOfStationInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct S_ArrayOfStationInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct S_ArrayOfStationInfo*>(p->ptr));
		break;
	case SOAP_TYPE_StationInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct S_StationInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct S_StationInfo*>(p->ptr));
		break;
	case SOAP_TYPE_xsd_StationInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct S_StationInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct S_StationInfo*>(p->ptr));
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	do
	{	switch (t)
		{
		default: return 0;
		}
	}
	while (t != b);
	return 1;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_ns__CameraInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__CameraInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__CameraInfo*)p = *(struct ns__CameraInfo*)q;
		break;
	case SOAP_TYPE_S_ArrayOfCameraInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct S_ArrayOfCameraInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct S_ArrayOfCameraInfo*)p = *(struct S_ArrayOfCameraInfo*)q;
		break;
	case SOAP_TYPE_S_CameraInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct S_CameraInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct S_CameraInfo*)p = *(struct S_CameraInfo*)q;
		break;
	case SOAP_TYPE_ns__ErrorTypeInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__ErrorTypeInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__ErrorTypeInfo*)p = *(struct ns__ErrorTypeInfo*)q;
		break;
	case SOAP_TYPE_S_ArrayOfErrorTypeInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct S_ArrayOfErrorTypeInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct S_ArrayOfErrorTypeInfo*)p = *(struct S_ArrayOfErrorTypeInfo*)q;
		break;
	case SOAP_TYPE_S_ErrorTypeInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct S_ErrorTypeInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct S_ErrorTypeInfo*)p = *(struct S_ErrorTypeInfo*)q;
		break;
	case SOAP_TYPE_ns__StationInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__StationInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__StationInfo*)p = *(struct ns__StationInfo*)q;
		break;
	case SOAP_TYPE_S_ArrayOfStationInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct S_ArrayOfStationInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct S_ArrayOfStationInfo*)p = *(struct S_ArrayOfStationInfo*)q;
		break;
	case SOAP_TYPE_S_StationInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct S_StationInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct S_StationInfo*)p = *(struct S_StationInfo*)q;
		break;
	case SOAP_TYPE_ns__Detectinfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__Detectinfo type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__Detectinfo*)p = *(struct ns__Detectinfo*)q;
		break;
	case SOAP_TYPE_ns__getInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__getInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__getInfo*)p = *(struct ns__getInfo*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	case SOAP_TYPE_ArrayOfCameraInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct S_ArrayOfCameraInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct S_ArrayOfCameraInfo*)p = *(struct S_ArrayOfCameraInfo*)q;
		break;
	case SOAP_TYPE_CameraInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct S_CameraInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct S_CameraInfo*)p = *(struct S_CameraInfo*)q;
		break;
	case SOAP_TYPE_xsd_CameraInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct S_CameraInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct S_CameraInfo*)p = *(struct S_CameraInfo*)q;
		break;
	case SOAP_TYPE_ArrayOfErrorTypeInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct S_ArrayOfErrorTypeInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct S_ArrayOfErrorTypeInfo*)p = *(struct S_ArrayOfErrorTypeInfo*)q;
		break;
	case SOAP_TYPE_ErrorTypeInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct S_ErrorTypeInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct S_ErrorTypeInfo*)p = *(struct S_ErrorTypeInfo*)q;
		break;
	case SOAP_TYPE_xsd_ErrorTypeInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct S_ErrorTypeInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct S_ErrorTypeInfo*)p = *(struct S_ErrorTypeInfo*)q;
		break;
	case SOAP_TYPE_ArrayOfStationInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct S_ArrayOfStationInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct S_ArrayOfStationInfo*)p = *(struct S_ArrayOfStationInfo*)q;
		break;
	case SOAP_TYPE_StationInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct S_StationInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct S_StationInfo*)p = *(struct S_StationInfo*)q;
		break;
	case SOAP_TYPE_xsd_StationInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct S_StationInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct S_StationInfo*)p = *(struct S_StationInfo*)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag?tag:"byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag?tag:"int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, long *a, const char *type)
{	long *p;
	p = soap_inlong(soap, tag, a, type, SOAP_TYPE_xsd__int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap *soap, const long *a, const char *tag, const char *type)
{
	if (soap_out_xsd__int(soap, tag?tag:"xsd:int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_long(struct soap *soap, long *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_long
	*a = SOAP_DEFAULT_long;
#else
	*a = (long)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap *soap, const char *tag, long *a, const char *type)
{	long *p;
	p = soap_inlong(soap, tag, a, type, SOAP_TYPE_long);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap *soap, const long *a, const char *tag, const char *type)
{
	if (soap_out_long(soap, tag?tag:"long", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_long(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_ENV__Fault::SOAP_ENV__Fault()
{
	soap_default_SOAP_ENV__Fault(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_ENV__Reason::SOAP_ENV__Reason()
{
	soap_default_SOAP_ENV__Reason(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_ENV__Detail::SOAP_ENV__Detail()
{
	soap_default_SOAP_ENV__Detail(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_ENV__Code::SOAP_ENV__Code()
{
	soap_default_SOAP_ENV__Code(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_ENV__Header::SOAP_ENV__Header()
{
	soap_default_SOAP_ENV__Header(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

ns__getInfo::ns__getInfo()
{
	soap_default_ns__getInfo(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getInfo(struct soap *soap, struct ns__getInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->nOrder);
	soap_default_int(soap, &a->nReserveReq);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getInfo(struct soap *soap, const struct ns__getInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getInfo(struct soap *soap, const char *tag, int id, const struct ns__getInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getInfo), type))
		return soap->error;
	if (soap_out_int(soap, "nOrder", -1, &a->nOrder, ""))
		return soap->error;
	if (soap_out_int(soap, "nReserveReq", -1, &a->nReserveReq, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getInfo * SOAP_FMAC4 soap_in_ns__getInfo(struct soap *soap, const char *tag, struct ns__getInfo *a, const char *type)
{
	size_t soap_flag_nOrder = 1;
	size_t soap_flag_nReserveReq = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getInfo, sizeof(struct ns__getInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nOrder && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nOrder", &a->nOrder, "xsd:int"))
				{	soap_flag_nOrder--;
					continue;
				}
			if (soap_flag_nReserveReq && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nReserveReq", &a->nReserveReq, "xsd:int"))
				{	soap_flag_nReserveReq--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nOrder > 0 || soap_flag_nReserveReq > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__getInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getInfo, SOAP_TYPE_ns__getInfo, sizeof(struct ns__getInfo), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__getInfo * SOAP_FMAC2 soap_instantiate_ns__getInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getInfo(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__getInfo *p;
	size_t k = sizeof(struct ns__getInfo);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__getInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__getInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__getInfo location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__getInfo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getInfo(struct soap *soap, const struct ns__getInfo *a, const char *tag, const char *type)
{
	if (soap_out_ns__getInfo(soap, tag?tag:"ns:getInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getInfo * SOAP_FMAC4 soap_get_ns__getInfo(struct soap *soap, struct ns__getInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

ns__Detectinfo::ns__Detectinfo()
{
	soap_default_ns__Detectinfo(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Detectinfo(struct soap *soap, struct ns__Detectinfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &a->nMouldNumber);
	soap_default_xsd__string(soap, &a->sMouldID);
	soap_default_xsd__int(soap, &a->nCheckCount);
	soap_default_xsd__int(soap, &a->nKickCount);
	soap_default_xsd_CameraInfo(soap, &a->sCameraInfo);
	soap_default_xsd_ErrorTypeInfo(soap, &a->sErrorTypeInfo);
	soap_default_xsd_StationInfo(soap, &a->sStationInfo);
	soap_default_xsd__int(soap, &a->nReserveRes1);
	soap_default_xsd__int(soap, &a->nReserveRes2);
	soap_default_xsd__int(soap, &a->nReserveRes3);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Detectinfo(struct soap *soap, const struct ns__Detectinfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__string(soap, (char*const*)&a->sMouldID);
	soap_serialize_xsd_CameraInfo(soap, &a->sCameraInfo);
	soap_serialize_xsd_ErrorTypeInfo(soap, &a->sErrorTypeInfo);
	soap_serialize_xsd_StationInfo(soap, &a->sStationInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Detectinfo(struct soap *soap, const char *tag, int id, const struct ns__Detectinfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Detectinfo), type))
		return soap->error;
	if (soap_out_xsd__int(soap, "nMouldNumber", -1, &a->nMouldNumber, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "sMouldID", -1, (char*const*)&a->sMouldID, ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "nCheckCount", -1, &a->nCheckCount, ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "nKickCount", -1, &a->nKickCount, ""))
		return soap->error;
	if (soap_out_xsd_CameraInfo(soap, "sCameraInfo", -1, &a->sCameraInfo, ""))
		return soap->error;
	if (soap_out_xsd_ErrorTypeInfo(soap, "sErrorTypeInfo", -1, &a->sErrorTypeInfo, ""))
		return soap->error;
	if (soap_out_xsd_StationInfo(soap, "sStationInfo", -1, &a->sStationInfo, ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "nReserveRes1", -1, &a->nReserveRes1, ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "nReserveRes2", -1, &a->nReserveRes2, ""))
		return soap->error;
	if (soap_out_xsd__int(soap, "nReserveRes3", -1, &a->nReserveRes3, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Detectinfo * SOAP_FMAC4 soap_in_ns__Detectinfo(struct soap *soap, const char *tag, struct ns__Detectinfo *a, const char *type)
{
	size_t soap_flag_nMouldNumber = 1;
	size_t soap_flag_sMouldID = 1;
	size_t soap_flag_nCheckCount = 1;
	size_t soap_flag_nKickCount = 1;
	size_t soap_flag_sCameraInfo = 1;
	size_t soap_flag_sErrorTypeInfo = 1;
	size_t soap_flag_sStationInfo = 1;
	size_t soap_flag_nReserveRes1 = 1;
	size_t soap_flag_nReserveRes2 = 1;
	size_t soap_flag_nReserveRes3 = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Detectinfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Detectinfo, sizeof(struct ns__Detectinfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__Detectinfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nMouldNumber && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "nMouldNumber", &a->nMouldNumber, "xsd:int"))
				{	soap_flag_nMouldNumber--;
					continue;
				}
			if (soap_flag_sMouldID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "sMouldID", (char**)&a->sMouldID, "xsd:string"))
				{	soap_flag_sMouldID--;
					continue;
				}
			if (soap_flag_nCheckCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "nCheckCount", &a->nCheckCount, "xsd:int"))
				{	soap_flag_nCheckCount--;
					continue;
				}
			if (soap_flag_nKickCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "nKickCount", &a->nKickCount, "xsd:int"))
				{	soap_flag_nKickCount--;
					continue;
				}
			if (soap_flag_sCameraInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd_CameraInfo(soap, "sCameraInfo", &a->sCameraInfo, "xsd-CameraInfo"))
				{	soap_flag_sCameraInfo--;
					continue;
				}
			if (soap_flag_sErrorTypeInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd_ErrorTypeInfo(soap, "sErrorTypeInfo", &a->sErrorTypeInfo, "xsd-ErrorTypeInfo"))
				{	soap_flag_sErrorTypeInfo--;
					continue;
				}
			if (soap_flag_sStationInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd_StationInfo(soap, "sStationInfo", &a->sStationInfo, "xsd-StationInfo"))
				{	soap_flag_sStationInfo--;
					continue;
				}
			if (soap_flag_nReserveRes1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "nReserveRes1", &a->nReserveRes1, "xsd:int"))
				{	soap_flag_nReserveRes1--;
					continue;
				}
			if (soap_flag_nReserveRes2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "nReserveRes2", &a->nReserveRes2, "xsd:int"))
				{	soap_flag_nReserveRes2--;
					continue;
				}
			if (soap_flag_nReserveRes3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "nReserveRes3", &a->nReserveRes3, "xsd:int"))
				{	soap_flag_nReserveRes3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nMouldNumber > 0 || soap_flag_nCheckCount > 0 || soap_flag_nKickCount > 0 || soap_flag_sCameraInfo > 0 || soap_flag_sErrorTypeInfo > 0 || soap_flag_sStationInfo > 0 || soap_flag_nReserveRes1 > 0 || soap_flag_nReserveRes2 > 0 || soap_flag_nReserveRes3 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__Detectinfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Detectinfo, SOAP_TYPE_ns__Detectinfo, sizeof(struct ns__Detectinfo), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__Detectinfo * SOAP_FMAC2 soap_instantiate_ns__Detectinfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Detectinfo(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__Detectinfo *p;
	size_t k = sizeof(struct ns__Detectinfo);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__Detectinfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__Detectinfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__Detectinfo location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__Detectinfo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Detectinfo(struct soap *soap, const struct ns__Detectinfo *a, const char *tag, const char *type)
{
	if (soap_out_ns__Detectinfo(soap, tag?tag:"ns:Detectinfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Detectinfo * SOAP_FMAC4 soap_get_ns__Detectinfo(struct soap *soap, struct ns__Detectinfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Detectinfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_StationInfo(struct soap *soap, const struct S_StationInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ArrayOfStationInfo(soap, &a->sStationInfoArray);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_StationInfo(struct soap *soap, const char *tag, int id, const struct S_StationInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_StationInfo), type))
		return soap->error;
	if (soap_out_int(soap, "nStationCount", -1, &a->nStationCount, ""))
		return soap->error;
	if (soap_out_ArrayOfStationInfo(soap, "sStationInfoArray", -1, &a->sStationInfoArray, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct S_StationInfo * SOAP_FMAC4 soap_in_StationInfo(struct soap *soap, const char *tag, struct S_StationInfo *a, const char *type)
{
	size_t soap_flag_nStationCount = 1;
	size_t soap_flag_sStationInfoArray = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct S_StationInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_StationInfo, sizeof(struct S_StationInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_StationInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nStationCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nStationCount", &a->nStationCount, "xsd:int"))
				{	soap_flag_nStationCount--;
					continue;
				}
			if (soap_flag_sStationInfoArray && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ArrayOfStationInfo(soap, "sStationInfoArray", &a->sStationInfoArray, "ns:StationInfo"))
				{	soap_flag_sStationInfoArray--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nStationCount > 0 || soap_flag_sStationInfoArray > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct S_StationInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_StationInfo, SOAP_TYPE_StationInfo, sizeof(struct S_StationInfo), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_StationInfo(struct soap *soap, const struct S_StationInfo *a, const char *tag, const char *type)
{
	if (soap_out_StationInfo(soap, tag?tag:"StationInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct S_StationInfo * SOAP_FMAC4 soap_get_StationInfo(struct soap *soap, struct S_StationInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_StationInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

S_StationInfo::S_StationInfo()
{
	soap_default_S_StationInfo(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_S_StationInfo(struct soap *soap, struct S_StationInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->nStationCount);
	soap_default_ArrayOfStationInfo(soap, &a->sStationInfoArray);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_S_StationInfo(struct soap *soap, const struct S_StationInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ArrayOfStationInfo(soap, &a->sStationInfoArray);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_S_StationInfo(struct soap *soap, const char *tag, int id, const struct S_StationInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_S_StationInfo), type))
		return soap->error;
	if (soap_out_int(soap, "nStationCount", -1, &a->nStationCount, ""))
		return soap->error;
	if (soap_out_ArrayOfStationInfo(soap, "sStationInfoArray", -1, &a->sStationInfoArray, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct S_StationInfo * SOAP_FMAC4 soap_in_S_StationInfo(struct soap *soap, const char *tag, struct S_StationInfo *a, const char *type)
{
	size_t soap_flag_nStationCount = 1;
	size_t soap_flag_sStationInfoArray = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct S_StationInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_S_StationInfo, sizeof(struct S_StationInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_S_StationInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nStationCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nStationCount", &a->nStationCount, "xsd:int"))
				{	soap_flag_nStationCount--;
					continue;
				}
			if (soap_flag_sStationInfoArray && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ArrayOfStationInfo(soap, "sStationInfoArray", &a->sStationInfoArray, "ns:StationInfo"))
				{	soap_flag_sStationInfoArray--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nStationCount > 0 || soap_flag_sStationInfoArray > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct S_StationInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_S_StationInfo, SOAP_TYPE_S_StationInfo, sizeof(struct S_StationInfo), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct S_StationInfo * SOAP_FMAC2 soap_instantiate_S_StationInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_S_StationInfo(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct S_StationInfo *p;
	size_t k = sizeof(struct S_StationInfo);
	if (n < 0)
	{	p = SOAP_NEW(struct S_StationInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct S_StationInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct S_StationInfo location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_S_StationInfo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_S_StationInfo(struct soap *soap, const struct S_StationInfo *a, const char *tag, const char *type)
{
	if (soap_out_S_StationInfo(soap, tag?tag:"S-StationInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct S_StationInfo * SOAP_FMAC4 soap_get_S_StationInfo(struct soap *soap, struct S_StationInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_S_StationInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ArrayOfStationInfo(struct soap *soap, const struct S_ArrayOfStationInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->__ptr && !soap_array_reference(soap, a, a->__ptr, a->__size, SOAP_TYPE_ArrayOfStationInfo))
	{	int i;
		for (i = 0; i < a->__size; i++)
		{
			soap_serialize_PointerTons__StationInfo(soap, a->__ptr + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfStationInfo(struct soap *soap, const char *tag, int id, const struct S_ArrayOfStationInfo *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptr ? soap_putsizesoffsets(soap, "ns:StationInfo", &a->__size, NULL, 1) : NULL;
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_ArrayOfStationInfo, NULL);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons__StationInfo(soap, "item", -1, &a->__ptr[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct S_ArrayOfStationInfo * SOAP_FMAC4 soap_in_ArrayOfStationInfo(struct soap *soap, const char *tag, struct S_ArrayOfStationInfo *a, const char *type)
{	int i, j;
	struct ns__StationInfo **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct S_ArrayOfStationInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ArrayOfStationInfo, sizeof(struct S_ArrayOfStationInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ArrayOfStationInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		if (*soap->arraySize)
		{
			soap_getsizes(soap->arraySize, &a->__size, 1);
			a->__size -= j = soap_getoffsets(soap->arrayOffset, &a->__size, NULL, 1);
			if (a->__size > SOAP_MAXARRAYSIZE)
			{	soap->error = SOAP_OCCURS;
				return NULL;
			}
			a->__ptr = (struct ns__StationInfo **)soap_malloc(soap, sizeof(struct ns__StationInfo *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptr[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons__StationInfo(soap, NULL, a->__ptr + i, "ns:StationInfo"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; a->__size < SOAP_MAXARRAYSIZE; a->__size++)
			{	p = (struct ns__StationInfo **)soap_push_block(soap, NULL, sizeof(struct ns__StationInfo *));
				if (!p)
					break;
				*p = NULL;
				if (!soap_in_PointerTons__StationInfo(soap, NULL, p, "ns:StationInfo"))
				{	if (soap->error == SOAP_NO_TAG)
						soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptr = (struct ns__StationInfo **)soap_save_block(soap, NULL, NULL, 1);
		}
		if (soap->error || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct S_ArrayOfStationInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ArrayOfStationInfo, SOAP_TYPE_ArrayOfStationInfo, sizeof(struct S_ArrayOfStationInfo), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ArrayOfStationInfo(struct soap *soap, const struct S_ArrayOfStationInfo *a, const char *tag, const char *type)
{
	if (soap_out_ArrayOfStationInfo(soap, tag?tag:"ArrayOfStationInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct S_ArrayOfStationInfo * SOAP_FMAC4 soap_get_ArrayOfStationInfo(struct soap *soap, struct S_ArrayOfStationInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ArrayOfStationInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

S_ArrayOfStationInfo::S_ArrayOfStationInfo()
{
	soap_default_S_ArrayOfStationInfo(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_S_ArrayOfStationInfo(struct soap *soap, struct S_ArrayOfStationInfo *a)
{
	(void)soap; /* appease -Wall -Werror */
	a->__ptr = NULL;
	a->__size = 0;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_S_ArrayOfStationInfo(struct soap *soap, const struct S_ArrayOfStationInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->__ptr && !soap_array_reference(soap, a, a->__ptr, a->__size, SOAP_TYPE_S_ArrayOfStationInfo))
	{	int i;
		for (i = 0; i < a->__size; i++)
		{
			soap_serialize_PointerTons__StationInfo(soap, a->__ptr + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_S_ArrayOfStationInfo(struct soap *soap, const char *tag, int id, const struct S_ArrayOfStationInfo *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptr ? soap_putsizesoffsets(soap, "ns:StationInfo", &a->__size, NULL, 1) : NULL;
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_S_ArrayOfStationInfo, NULL);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons__StationInfo(soap, "item", -1, &a->__ptr[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct S_ArrayOfStationInfo * SOAP_FMAC4 soap_in_S_ArrayOfStationInfo(struct soap *soap, const char *tag, struct S_ArrayOfStationInfo *a, const char *type)
{	int i, j;
	struct ns__StationInfo **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct S_ArrayOfStationInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_S_ArrayOfStationInfo, sizeof(struct S_ArrayOfStationInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_S_ArrayOfStationInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		if (*soap->arraySize)
		{
			soap_getsizes(soap->arraySize, &a->__size, 1);
			a->__size -= j = soap_getoffsets(soap->arrayOffset, &a->__size, NULL, 1);
			if (a->__size > SOAP_MAXARRAYSIZE)
			{	soap->error = SOAP_OCCURS;
				return NULL;
			}
			a->__ptr = (struct ns__StationInfo **)soap_malloc(soap, sizeof(struct ns__StationInfo *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptr[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons__StationInfo(soap, NULL, a->__ptr + i, "ns:StationInfo"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; a->__size < SOAP_MAXARRAYSIZE; a->__size++)
			{	p = (struct ns__StationInfo **)soap_push_block(soap, NULL, sizeof(struct ns__StationInfo *));
				if (!p)
					break;
				*p = NULL;
				if (!soap_in_PointerTons__StationInfo(soap, NULL, p, "ns:StationInfo"))
				{	if (soap->error == SOAP_NO_TAG)
						soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptr = (struct ns__StationInfo **)soap_save_block(soap, NULL, NULL, 1);
		}
		if (soap->error || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct S_ArrayOfStationInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_S_ArrayOfStationInfo, SOAP_TYPE_S_ArrayOfStationInfo, sizeof(struct S_ArrayOfStationInfo), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct S_ArrayOfStationInfo * SOAP_FMAC2 soap_instantiate_S_ArrayOfStationInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_S_ArrayOfStationInfo(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct S_ArrayOfStationInfo *p;
	size_t k = sizeof(struct S_ArrayOfStationInfo);
	if (n < 0)
	{	p = SOAP_NEW(struct S_ArrayOfStationInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct S_ArrayOfStationInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct S_ArrayOfStationInfo location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_S_ArrayOfStationInfo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_S_ArrayOfStationInfo(struct soap *soap, const struct S_ArrayOfStationInfo *a, const char *tag, const char *type)
{
	if (soap_out_S_ArrayOfStationInfo(soap, tag?tag:"SOAP-ENC:Array", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct S_ArrayOfStationInfo * SOAP_FMAC4 soap_get_S_ArrayOfStationInfo(struct soap *soap, struct S_ArrayOfStationInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_S_ArrayOfStationInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

ns__StationInfo::ns__StationInfo()
{
	soap_default_ns__StationInfo(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__StationInfo(struct soap *soap, struct ns__StationInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->sStationLabel);
	soap_default_int(soap, &a->nStationCheckCount);
	soap_default_int(soap, &a->nStationKickCount);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__StationInfo(struct soap *soap, const struct ns__StationInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->sStationLabel);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__StationInfo(struct soap *soap, const char *tag, int id, const struct ns__StationInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__StationInfo), type))
		return soap->error;
	if (soap_out_string(soap, "sStationLabel", -1, (char*const*)&a->sStationLabel, ""))
		return soap->error;
	if (soap_out_int(soap, "nStationCheckCount", -1, &a->nStationCheckCount, ""))
		return soap->error;
	if (soap_out_int(soap, "nStationKickCount", -1, &a->nStationKickCount, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__StationInfo * SOAP_FMAC4 soap_in_ns__StationInfo(struct soap *soap, const char *tag, struct ns__StationInfo *a, const char *type)
{
	size_t soap_flag_sStationLabel = 1;
	size_t soap_flag_nStationCheckCount = 1;
	size_t soap_flag_nStationKickCount = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__StationInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__StationInfo, sizeof(struct ns__StationInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__StationInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sStationLabel && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "sStationLabel", (char**)&a->sStationLabel, "xsd:string"))
				{	soap_flag_sStationLabel--;
					continue;
				}
			if (soap_flag_nStationCheckCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nStationCheckCount", &a->nStationCheckCount, "xsd:int"))
				{	soap_flag_nStationCheckCount--;
					continue;
				}
			if (soap_flag_nStationKickCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nStationKickCount", &a->nStationKickCount, "xsd:int"))
				{	soap_flag_nStationKickCount--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nStationCheckCount > 0 || soap_flag_nStationKickCount > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__StationInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__StationInfo, SOAP_TYPE_ns__StationInfo, sizeof(struct ns__StationInfo), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__StationInfo * SOAP_FMAC2 soap_instantiate_ns__StationInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__StationInfo(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__StationInfo *p;
	size_t k = sizeof(struct ns__StationInfo);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__StationInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__StationInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__StationInfo location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__StationInfo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__StationInfo(struct soap *soap, const struct ns__StationInfo *a, const char *tag, const char *type)
{
	if (soap_out_ns__StationInfo(soap, tag?tag:"ns:StationInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__StationInfo * SOAP_FMAC4 soap_get_ns__StationInfo(struct soap *soap, struct ns__StationInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__StationInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ErrorTypeInfo(struct soap *soap, const struct S_ErrorTypeInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ArrayOfErrorTypeInfo(soap, &a->sErrorTypeInfoArray);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ErrorTypeInfo(struct soap *soap, const char *tag, int id, const struct S_ErrorTypeInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ErrorTypeInfo), type))
		return soap->error;
	if (soap_out_int(soap, "nErrorTypeCount", -1, &a->nErrorTypeCount, ""))
		return soap->error;
	if (soap_out_ArrayOfErrorTypeInfo(soap, "sErrorTypeInfoArray", -1, &a->sErrorTypeInfoArray, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct S_ErrorTypeInfo * SOAP_FMAC4 soap_in_ErrorTypeInfo(struct soap *soap, const char *tag, struct S_ErrorTypeInfo *a, const char *type)
{
	size_t soap_flag_nErrorTypeCount = 1;
	size_t soap_flag_sErrorTypeInfoArray = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct S_ErrorTypeInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ErrorTypeInfo, sizeof(struct S_ErrorTypeInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ErrorTypeInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nErrorTypeCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nErrorTypeCount", &a->nErrorTypeCount, "xsd:int"))
				{	soap_flag_nErrorTypeCount--;
					continue;
				}
			if (soap_flag_sErrorTypeInfoArray && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ArrayOfErrorTypeInfo(soap, "sErrorTypeInfoArray", &a->sErrorTypeInfoArray, "ns:ErrorTypeInfo"))
				{	soap_flag_sErrorTypeInfoArray--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nErrorTypeCount > 0 || soap_flag_sErrorTypeInfoArray > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct S_ErrorTypeInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ErrorTypeInfo, SOAP_TYPE_ErrorTypeInfo, sizeof(struct S_ErrorTypeInfo), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ErrorTypeInfo(struct soap *soap, const struct S_ErrorTypeInfo *a, const char *tag, const char *type)
{
	if (soap_out_ErrorTypeInfo(soap, tag?tag:"ErrorTypeInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct S_ErrorTypeInfo * SOAP_FMAC4 soap_get_ErrorTypeInfo(struct soap *soap, struct S_ErrorTypeInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ErrorTypeInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

S_ErrorTypeInfo::S_ErrorTypeInfo()
{
	soap_default_S_ErrorTypeInfo(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_S_ErrorTypeInfo(struct soap *soap, struct S_ErrorTypeInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->nErrorTypeCount);
	soap_default_ArrayOfErrorTypeInfo(soap, &a->sErrorTypeInfoArray);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_S_ErrorTypeInfo(struct soap *soap, const struct S_ErrorTypeInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ArrayOfErrorTypeInfo(soap, &a->sErrorTypeInfoArray);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_S_ErrorTypeInfo(struct soap *soap, const char *tag, int id, const struct S_ErrorTypeInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_S_ErrorTypeInfo), type))
		return soap->error;
	if (soap_out_int(soap, "nErrorTypeCount", -1, &a->nErrorTypeCount, ""))
		return soap->error;
	if (soap_out_ArrayOfErrorTypeInfo(soap, "sErrorTypeInfoArray", -1, &a->sErrorTypeInfoArray, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct S_ErrorTypeInfo * SOAP_FMAC4 soap_in_S_ErrorTypeInfo(struct soap *soap, const char *tag, struct S_ErrorTypeInfo *a, const char *type)
{
	size_t soap_flag_nErrorTypeCount = 1;
	size_t soap_flag_sErrorTypeInfoArray = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct S_ErrorTypeInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_S_ErrorTypeInfo, sizeof(struct S_ErrorTypeInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_S_ErrorTypeInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nErrorTypeCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nErrorTypeCount", &a->nErrorTypeCount, "xsd:int"))
				{	soap_flag_nErrorTypeCount--;
					continue;
				}
			if (soap_flag_sErrorTypeInfoArray && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ArrayOfErrorTypeInfo(soap, "sErrorTypeInfoArray", &a->sErrorTypeInfoArray, "ns:ErrorTypeInfo"))
				{	soap_flag_sErrorTypeInfoArray--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nErrorTypeCount > 0 || soap_flag_sErrorTypeInfoArray > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct S_ErrorTypeInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_S_ErrorTypeInfo, SOAP_TYPE_S_ErrorTypeInfo, sizeof(struct S_ErrorTypeInfo), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct S_ErrorTypeInfo * SOAP_FMAC2 soap_instantiate_S_ErrorTypeInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_S_ErrorTypeInfo(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct S_ErrorTypeInfo *p;
	size_t k = sizeof(struct S_ErrorTypeInfo);
	if (n < 0)
	{	p = SOAP_NEW(struct S_ErrorTypeInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct S_ErrorTypeInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct S_ErrorTypeInfo location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_S_ErrorTypeInfo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_S_ErrorTypeInfo(struct soap *soap, const struct S_ErrorTypeInfo *a, const char *tag, const char *type)
{
	if (soap_out_S_ErrorTypeInfo(soap, tag?tag:"S-ErrorTypeInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct S_ErrorTypeInfo * SOAP_FMAC4 soap_get_S_ErrorTypeInfo(struct soap *soap, struct S_ErrorTypeInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_S_ErrorTypeInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ArrayOfErrorTypeInfo(struct soap *soap, const struct S_ArrayOfErrorTypeInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->__ptr && !soap_array_reference(soap, a, a->__ptr, a->__size, SOAP_TYPE_ArrayOfErrorTypeInfo))
	{	int i;
		for (i = 0; i < a->__size; i++)
		{
			soap_serialize_PointerTons__ErrorTypeInfo(soap, a->__ptr + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfErrorTypeInfo(struct soap *soap, const char *tag, int id, const struct S_ArrayOfErrorTypeInfo *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptr ? soap_putsizesoffsets(soap, "ns:ErrorTypeInfo", &a->__size, NULL, 1) : NULL;
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_ArrayOfErrorTypeInfo, NULL);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons__ErrorTypeInfo(soap, "item", -1, &a->__ptr[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct S_ArrayOfErrorTypeInfo * SOAP_FMAC4 soap_in_ArrayOfErrorTypeInfo(struct soap *soap, const char *tag, struct S_ArrayOfErrorTypeInfo *a, const char *type)
{	int i, j;
	struct ns__ErrorTypeInfo **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct S_ArrayOfErrorTypeInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ArrayOfErrorTypeInfo, sizeof(struct S_ArrayOfErrorTypeInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ArrayOfErrorTypeInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		if (*soap->arraySize)
		{
			soap_getsizes(soap->arraySize, &a->__size, 1);
			a->__size -= j = soap_getoffsets(soap->arrayOffset, &a->__size, NULL, 1);
			if (a->__size > SOAP_MAXARRAYSIZE)
			{	soap->error = SOAP_OCCURS;
				return NULL;
			}
			a->__ptr = (struct ns__ErrorTypeInfo **)soap_malloc(soap, sizeof(struct ns__ErrorTypeInfo *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptr[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons__ErrorTypeInfo(soap, NULL, a->__ptr + i, "ns:ErrorTypeInfo"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; a->__size < SOAP_MAXARRAYSIZE; a->__size++)
			{	p = (struct ns__ErrorTypeInfo **)soap_push_block(soap, NULL, sizeof(struct ns__ErrorTypeInfo *));
				if (!p)
					break;
				*p = NULL;
				if (!soap_in_PointerTons__ErrorTypeInfo(soap, NULL, p, "ns:ErrorTypeInfo"))
				{	if (soap->error == SOAP_NO_TAG)
						soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptr = (struct ns__ErrorTypeInfo **)soap_save_block(soap, NULL, NULL, 1);
		}
		if (soap->error || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct S_ArrayOfErrorTypeInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ArrayOfErrorTypeInfo, SOAP_TYPE_ArrayOfErrorTypeInfo, sizeof(struct S_ArrayOfErrorTypeInfo), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ArrayOfErrorTypeInfo(struct soap *soap, const struct S_ArrayOfErrorTypeInfo *a, const char *tag, const char *type)
{
	if (soap_out_ArrayOfErrorTypeInfo(soap, tag?tag:"ArrayOfErrorTypeInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct S_ArrayOfErrorTypeInfo * SOAP_FMAC4 soap_get_ArrayOfErrorTypeInfo(struct soap *soap, struct S_ArrayOfErrorTypeInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ArrayOfErrorTypeInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

S_ArrayOfErrorTypeInfo::S_ArrayOfErrorTypeInfo()
{
	soap_default_S_ArrayOfErrorTypeInfo(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_S_ArrayOfErrorTypeInfo(struct soap *soap, struct S_ArrayOfErrorTypeInfo *a)
{
	(void)soap; /* appease -Wall -Werror */
	a->__ptr = NULL;
	a->__size = 0;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_S_ArrayOfErrorTypeInfo(struct soap *soap, const struct S_ArrayOfErrorTypeInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->__ptr && !soap_array_reference(soap, a, a->__ptr, a->__size, SOAP_TYPE_S_ArrayOfErrorTypeInfo))
	{	int i;
		for (i = 0; i < a->__size; i++)
		{
			soap_serialize_PointerTons__ErrorTypeInfo(soap, a->__ptr + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_S_ArrayOfErrorTypeInfo(struct soap *soap, const char *tag, int id, const struct S_ArrayOfErrorTypeInfo *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptr ? soap_putsizesoffsets(soap, "ns:ErrorTypeInfo", &a->__size, NULL, 1) : NULL;
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_S_ArrayOfErrorTypeInfo, NULL);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons__ErrorTypeInfo(soap, "item", -1, &a->__ptr[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct S_ArrayOfErrorTypeInfo * SOAP_FMAC4 soap_in_S_ArrayOfErrorTypeInfo(struct soap *soap, const char *tag, struct S_ArrayOfErrorTypeInfo *a, const char *type)
{	int i, j;
	struct ns__ErrorTypeInfo **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct S_ArrayOfErrorTypeInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_S_ArrayOfErrorTypeInfo, sizeof(struct S_ArrayOfErrorTypeInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_S_ArrayOfErrorTypeInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		if (*soap->arraySize)
		{
			soap_getsizes(soap->arraySize, &a->__size, 1);
			a->__size -= j = soap_getoffsets(soap->arrayOffset, &a->__size, NULL, 1);
			if (a->__size > SOAP_MAXARRAYSIZE)
			{	soap->error = SOAP_OCCURS;
				return NULL;
			}
			a->__ptr = (struct ns__ErrorTypeInfo **)soap_malloc(soap, sizeof(struct ns__ErrorTypeInfo *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptr[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons__ErrorTypeInfo(soap, NULL, a->__ptr + i, "ns:ErrorTypeInfo"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; a->__size < SOAP_MAXARRAYSIZE; a->__size++)
			{	p = (struct ns__ErrorTypeInfo **)soap_push_block(soap, NULL, sizeof(struct ns__ErrorTypeInfo *));
				if (!p)
					break;
				*p = NULL;
				if (!soap_in_PointerTons__ErrorTypeInfo(soap, NULL, p, "ns:ErrorTypeInfo"))
				{	if (soap->error == SOAP_NO_TAG)
						soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptr = (struct ns__ErrorTypeInfo **)soap_save_block(soap, NULL, NULL, 1);
		}
		if (soap->error || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct S_ArrayOfErrorTypeInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_S_ArrayOfErrorTypeInfo, SOAP_TYPE_S_ArrayOfErrorTypeInfo, sizeof(struct S_ArrayOfErrorTypeInfo), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct S_ArrayOfErrorTypeInfo * SOAP_FMAC2 soap_instantiate_S_ArrayOfErrorTypeInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_S_ArrayOfErrorTypeInfo(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct S_ArrayOfErrorTypeInfo *p;
	size_t k = sizeof(struct S_ArrayOfErrorTypeInfo);
	if (n < 0)
	{	p = SOAP_NEW(struct S_ArrayOfErrorTypeInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct S_ArrayOfErrorTypeInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct S_ArrayOfErrorTypeInfo location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_S_ArrayOfErrorTypeInfo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_S_ArrayOfErrorTypeInfo(struct soap *soap, const struct S_ArrayOfErrorTypeInfo *a, const char *tag, const char *type)
{
	if (soap_out_S_ArrayOfErrorTypeInfo(soap, tag?tag:"SOAP-ENC:Array", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct S_ArrayOfErrorTypeInfo * SOAP_FMAC4 soap_get_S_ArrayOfErrorTypeInfo(struct soap *soap, struct S_ArrayOfErrorTypeInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_S_ArrayOfErrorTypeInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

ns__ErrorTypeInfo::ns__ErrorTypeInfo()
{
	soap_default_ns__ErrorTypeInfo(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__ErrorTypeInfo(struct soap *soap, struct ns__ErrorTypeInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->sErrorTypeName);
	soap_default_int(soap, &a->nErrorTypeClass);
	soap_default_int(soap, &a->nErrorTypeKickCount);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__ErrorTypeInfo(struct soap *soap, const struct ns__ErrorTypeInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->sErrorTypeName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ErrorTypeInfo(struct soap *soap, const char *tag, int id, const struct ns__ErrorTypeInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ErrorTypeInfo), type))
		return soap->error;
	if (soap_out_string(soap, "sErrorTypeName", -1, (char*const*)&a->sErrorTypeName, ""))
		return soap->error;
	if (soap_out_int(soap, "nErrorTypeClass", -1, &a->nErrorTypeClass, ""))
		return soap->error;
	if (soap_out_int(soap, "nErrorTypeKickCount", -1, &a->nErrorTypeKickCount, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__ErrorTypeInfo * SOAP_FMAC4 soap_in_ns__ErrorTypeInfo(struct soap *soap, const char *tag, struct ns__ErrorTypeInfo *a, const char *type)
{
	size_t soap_flag_sErrorTypeName = 1;
	size_t soap_flag_nErrorTypeClass = 1;
	size_t soap_flag_nErrorTypeKickCount = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__ErrorTypeInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ErrorTypeInfo, sizeof(struct ns__ErrorTypeInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__ErrorTypeInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sErrorTypeName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "sErrorTypeName", (char**)&a->sErrorTypeName, "xsd:string"))
				{	soap_flag_sErrorTypeName--;
					continue;
				}
			if (soap_flag_nErrorTypeClass && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nErrorTypeClass", &a->nErrorTypeClass, "xsd:int"))
				{	soap_flag_nErrorTypeClass--;
					continue;
				}
			if (soap_flag_nErrorTypeKickCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nErrorTypeKickCount", &a->nErrorTypeKickCount, "xsd:int"))
				{	soap_flag_nErrorTypeKickCount--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nErrorTypeClass > 0 || soap_flag_nErrorTypeKickCount > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__ErrorTypeInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ErrorTypeInfo, SOAP_TYPE_ns__ErrorTypeInfo, sizeof(struct ns__ErrorTypeInfo), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__ErrorTypeInfo * SOAP_FMAC2 soap_instantiate_ns__ErrorTypeInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__ErrorTypeInfo(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__ErrorTypeInfo *p;
	size_t k = sizeof(struct ns__ErrorTypeInfo);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__ErrorTypeInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__ErrorTypeInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__ErrorTypeInfo location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__ErrorTypeInfo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__ErrorTypeInfo(struct soap *soap, const struct ns__ErrorTypeInfo *a, const char *tag, const char *type)
{
	if (soap_out_ns__ErrorTypeInfo(soap, tag?tag:"ns:ErrorTypeInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__ErrorTypeInfo * SOAP_FMAC4 soap_get_ns__ErrorTypeInfo(struct soap *soap, struct ns__ErrorTypeInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ErrorTypeInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_CameraInfo(struct soap *soap, const struct S_CameraInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ArrayOfCameraInfo(soap, &a->sCameraInfoArray);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_CameraInfo(struct soap *soap, const char *tag, int id, const struct S_CameraInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_CameraInfo), type))
		return soap->error;
	if (soap_out_int(soap, "nCameraCount", -1, &a->nCameraCount, ""))
		return soap->error;
	if (soap_out_ArrayOfCameraInfo(soap, "sCameraInfoArray", -1, &a->sCameraInfoArray, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct S_CameraInfo * SOAP_FMAC4 soap_in_CameraInfo(struct soap *soap, const char *tag, struct S_CameraInfo *a, const char *type)
{
	size_t soap_flag_nCameraCount = 1;
	size_t soap_flag_sCameraInfoArray = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct S_CameraInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_CameraInfo, sizeof(struct S_CameraInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_CameraInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nCameraCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nCameraCount", &a->nCameraCount, "xsd:int"))
				{	soap_flag_nCameraCount--;
					continue;
				}
			if (soap_flag_sCameraInfoArray && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ArrayOfCameraInfo(soap, "sCameraInfoArray", &a->sCameraInfoArray, "ns:CameraInfo"))
				{	soap_flag_sCameraInfoArray--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nCameraCount > 0 || soap_flag_sCameraInfoArray > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct S_CameraInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_CameraInfo, SOAP_TYPE_CameraInfo, sizeof(struct S_CameraInfo), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_CameraInfo(struct soap *soap, const struct S_CameraInfo *a, const char *tag, const char *type)
{
	if (soap_out_CameraInfo(soap, tag?tag:"CameraInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct S_CameraInfo * SOAP_FMAC4 soap_get_CameraInfo(struct soap *soap, struct S_CameraInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_CameraInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

S_CameraInfo::S_CameraInfo()
{
	soap_default_S_CameraInfo(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_S_CameraInfo(struct soap *soap, struct S_CameraInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->nCameraCount);
	soap_default_ArrayOfCameraInfo(soap, &a->sCameraInfoArray);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_S_CameraInfo(struct soap *soap, const struct S_CameraInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ArrayOfCameraInfo(soap, &a->sCameraInfoArray);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_S_CameraInfo(struct soap *soap, const char *tag, int id, const struct S_CameraInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_S_CameraInfo), type))
		return soap->error;
	if (soap_out_int(soap, "nCameraCount", -1, &a->nCameraCount, ""))
		return soap->error;
	if (soap_out_ArrayOfCameraInfo(soap, "sCameraInfoArray", -1, &a->sCameraInfoArray, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct S_CameraInfo * SOAP_FMAC4 soap_in_S_CameraInfo(struct soap *soap, const char *tag, struct S_CameraInfo *a, const char *type)
{
	size_t soap_flag_nCameraCount = 1;
	size_t soap_flag_sCameraInfoArray = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct S_CameraInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_S_CameraInfo, sizeof(struct S_CameraInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_S_CameraInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nCameraCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nCameraCount", &a->nCameraCount, "xsd:int"))
				{	soap_flag_nCameraCount--;
					continue;
				}
			if (soap_flag_sCameraInfoArray && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ArrayOfCameraInfo(soap, "sCameraInfoArray", &a->sCameraInfoArray, "ns:CameraInfo"))
				{	soap_flag_sCameraInfoArray--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nCameraCount > 0 || soap_flag_sCameraInfoArray > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct S_CameraInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_S_CameraInfo, SOAP_TYPE_S_CameraInfo, sizeof(struct S_CameraInfo), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct S_CameraInfo * SOAP_FMAC2 soap_instantiate_S_CameraInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_S_CameraInfo(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct S_CameraInfo *p;
	size_t k = sizeof(struct S_CameraInfo);
	if (n < 0)
	{	p = SOAP_NEW(struct S_CameraInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct S_CameraInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct S_CameraInfo location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_S_CameraInfo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_S_CameraInfo(struct soap *soap, const struct S_CameraInfo *a, const char *tag, const char *type)
{
	if (soap_out_S_CameraInfo(soap, tag?tag:"S-CameraInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct S_CameraInfo * SOAP_FMAC4 soap_get_S_CameraInfo(struct soap *soap, struct S_CameraInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_S_CameraInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ArrayOfCameraInfo(struct soap *soap, const struct S_ArrayOfCameraInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->__ptr && !soap_array_reference(soap, a, a->__ptr, a->__size, SOAP_TYPE_ArrayOfCameraInfo))
	{	int i;
		for (i = 0; i < a->__size; i++)
		{
			soap_serialize_PointerTons__CameraInfo(soap, a->__ptr + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCameraInfo(struct soap *soap, const char *tag, int id, const struct S_ArrayOfCameraInfo *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptr ? soap_putsizesoffsets(soap, "ns:CameraInfo", &a->__size, NULL, 1) : NULL;
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_ArrayOfCameraInfo, NULL);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons__CameraInfo(soap, "item", -1, &a->__ptr[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct S_ArrayOfCameraInfo * SOAP_FMAC4 soap_in_ArrayOfCameraInfo(struct soap *soap, const char *tag, struct S_ArrayOfCameraInfo *a, const char *type)
{	int i, j;
	struct ns__CameraInfo **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct S_ArrayOfCameraInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ArrayOfCameraInfo, sizeof(struct S_ArrayOfCameraInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ArrayOfCameraInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		if (*soap->arraySize)
		{
			soap_getsizes(soap->arraySize, &a->__size, 1);
			a->__size -= j = soap_getoffsets(soap->arrayOffset, &a->__size, NULL, 1);
			if (a->__size > SOAP_MAXARRAYSIZE)
			{	soap->error = SOAP_OCCURS;
				return NULL;
			}
			a->__ptr = (struct ns__CameraInfo **)soap_malloc(soap, sizeof(struct ns__CameraInfo *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptr[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons__CameraInfo(soap, NULL, a->__ptr + i, "ns:CameraInfo"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; a->__size < SOAP_MAXARRAYSIZE; a->__size++)
			{	p = (struct ns__CameraInfo **)soap_push_block(soap, NULL, sizeof(struct ns__CameraInfo *));
				if (!p)
					break;
				*p = NULL;
				if (!soap_in_PointerTons__CameraInfo(soap, NULL, p, "ns:CameraInfo"))
				{	if (soap->error == SOAP_NO_TAG)
						soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptr = (struct ns__CameraInfo **)soap_save_block(soap, NULL, NULL, 1);
		}
		if (soap->error || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct S_ArrayOfCameraInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ArrayOfCameraInfo, SOAP_TYPE_ArrayOfCameraInfo, sizeof(struct S_ArrayOfCameraInfo), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ArrayOfCameraInfo(struct soap *soap, const struct S_ArrayOfCameraInfo *a, const char *tag, const char *type)
{
	if (soap_out_ArrayOfCameraInfo(soap, tag?tag:"ArrayOfCameraInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct S_ArrayOfCameraInfo * SOAP_FMAC4 soap_get_ArrayOfCameraInfo(struct soap *soap, struct S_ArrayOfCameraInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ArrayOfCameraInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

S_ArrayOfCameraInfo::S_ArrayOfCameraInfo()
{
	soap_default_S_ArrayOfCameraInfo(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_S_ArrayOfCameraInfo(struct soap *soap, struct S_ArrayOfCameraInfo *a)
{
	(void)soap; /* appease -Wall -Werror */
	a->__ptr = NULL;
	a->__size = 0;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_S_ArrayOfCameraInfo(struct soap *soap, const struct S_ArrayOfCameraInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->__ptr && !soap_array_reference(soap, a, a->__ptr, a->__size, SOAP_TYPE_S_ArrayOfCameraInfo))
	{	int i;
		for (i = 0; i < a->__size; i++)
		{
			soap_serialize_PointerTons__CameraInfo(soap, a->__ptr + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_S_ArrayOfCameraInfo(struct soap *soap, const char *tag, int id, const struct S_ArrayOfCameraInfo *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptr ? soap_putsizesoffsets(soap, "ns:CameraInfo", &a->__size, NULL, 1) : NULL;
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_S_ArrayOfCameraInfo, NULL);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons__CameraInfo(soap, "item", -1, &a->__ptr[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct S_ArrayOfCameraInfo * SOAP_FMAC4 soap_in_S_ArrayOfCameraInfo(struct soap *soap, const char *tag, struct S_ArrayOfCameraInfo *a, const char *type)
{	int i, j;
	struct ns__CameraInfo **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct S_ArrayOfCameraInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_S_ArrayOfCameraInfo, sizeof(struct S_ArrayOfCameraInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_S_ArrayOfCameraInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		if (*soap->arraySize)
		{
			soap_getsizes(soap->arraySize, &a->__size, 1);
			a->__size -= j = soap_getoffsets(soap->arrayOffset, &a->__size, NULL, 1);
			if (a->__size > SOAP_MAXARRAYSIZE)
			{	soap->error = SOAP_OCCURS;
				return NULL;
			}
			a->__ptr = (struct ns__CameraInfo **)soap_malloc(soap, sizeof(struct ns__CameraInfo *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptr[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons__CameraInfo(soap, NULL, a->__ptr + i, "ns:CameraInfo"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; a->__size < SOAP_MAXARRAYSIZE; a->__size++)
			{	p = (struct ns__CameraInfo **)soap_push_block(soap, NULL, sizeof(struct ns__CameraInfo *));
				if (!p)
					break;
				*p = NULL;
				if (!soap_in_PointerTons__CameraInfo(soap, NULL, p, "ns:CameraInfo"))
				{	if (soap->error == SOAP_NO_TAG)
						soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptr = (struct ns__CameraInfo **)soap_save_block(soap, NULL, NULL, 1);
		}
		if (soap->error || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct S_ArrayOfCameraInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_S_ArrayOfCameraInfo, SOAP_TYPE_S_ArrayOfCameraInfo, sizeof(struct S_ArrayOfCameraInfo), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct S_ArrayOfCameraInfo * SOAP_FMAC2 soap_instantiate_S_ArrayOfCameraInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_S_ArrayOfCameraInfo(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct S_ArrayOfCameraInfo *p;
	size_t k = sizeof(struct S_ArrayOfCameraInfo);
	if (n < 0)
	{	p = SOAP_NEW(struct S_ArrayOfCameraInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct S_ArrayOfCameraInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct S_ArrayOfCameraInfo location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_S_ArrayOfCameraInfo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_S_ArrayOfCameraInfo(struct soap *soap, const struct S_ArrayOfCameraInfo *a, const char *tag, const char *type)
{
	if (soap_out_S_ArrayOfCameraInfo(soap, tag?tag:"SOAP-ENC:Array", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct S_ArrayOfCameraInfo * SOAP_FMAC4 soap_get_S_ArrayOfCameraInfo(struct soap *soap, struct S_ArrayOfCameraInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_S_ArrayOfCameraInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

ns__CameraInfo::ns__CameraInfo()
{
	soap_default_ns__CameraInfo(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__CameraInfo(struct soap *soap, struct ns__CameraInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->sCameraLabel);
	soap_default_int(soap, &a->nCheckCount);
	soap_default_int(soap, &a->nKickCount);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__CameraInfo(struct soap *soap, const struct ns__CameraInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->sCameraLabel);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__CameraInfo(struct soap *soap, const char *tag, int id, const struct ns__CameraInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__CameraInfo), type))
		return soap->error;
	if (soap_out_string(soap, "sCameraLabel", -1, (char*const*)&a->sCameraLabel, ""))
		return soap->error;
	if (soap_out_int(soap, "nCheckCount", -1, &a->nCheckCount, ""))
		return soap->error;
	if (soap_out_int(soap, "nKickCount", -1, &a->nKickCount, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__CameraInfo * SOAP_FMAC4 soap_in_ns__CameraInfo(struct soap *soap, const char *tag, struct ns__CameraInfo *a, const char *type)
{
	size_t soap_flag_sCameraLabel = 1;
	size_t soap_flag_nCheckCount = 1;
	size_t soap_flag_nKickCount = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__CameraInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__CameraInfo, sizeof(struct ns__CameraInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__CameraInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sCameraLabel && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "sCameraLabel", (char**)&a->sCameraLabel, "xsd:string"))
				{	soap_flag_sCameraLabel--;
					continue;
				}
			if (soap_flag_nCheckCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nCheckCount", &a->nCheckCount, "xsd:int"))
				{	soap_flag_nCheckCount--;
					continue;
				}
			if (soap_flag_nKickCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nKickCount", &a->nKickCount, "xsd:int"))
				{	soap_flag_nKickCount--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nCheckCount > 0 || soap_flag_nKickCount > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__CameraInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__CameraInfo, SOAP_TYPE_ns__CameraInfo, sizeof(struct ns__CameraInfo), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__CameraInfo * SOAP_FMAC2 soap_instantiate_ns__CameraInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__CameraInfo(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__CameraInfo *p;
	size_t k = sizeof(struct ns__CameraInfo);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__CameraInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__CameraInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__CameraInfo location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__CameraInfo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__CameraInfo(struct soap *soap, const struct ns__CameraInfo *a, const char *tag, const char *type)
{
	if (soap_out_ns__CameraInfo(soap, tag?tag:"ns:CameraInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__CameraInfo * SOAP_FMAC4 soap_get_ns__CameraInfo(struct soap *soap, struct ns__CameraInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__CameraInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__Detectinfo(struct soap *soap, struct ns__Detectinfo *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__Detectinfo))
		soap_serialize_ns__Detectinfo(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__Detectinfo(struct soap *soap, const char *tag, int id, struct ns__Detectinfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__Detectinfo, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ns__Detectinfo(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__Detectinfo ** SOAP_FMAC4 soap_in_PointerTons__Detectinfo(struct soap *soap, const char *tag, struct ns__Detectinfo **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__Detectinfo **)soap_malloc(soap, sizeof(struct ns__Detectinfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__Detectinfo(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__Detectinfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__Detectinfo, sizeof(struct ns__Detectinfo), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__Detectinfo(struct soap *soap, struct ns__Detectinfo *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons__Detectinfo(soap, tag?tag:"ns:Detectinfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Detectinfo ** SOAP_FMAC4 soap_get_PointerTons__Detectinfo(struct soap *soap, struct ns__Detectinfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__Detectinfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons__StationInfo(struct soap *soap, struct ns__StationInfo **const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons__StationInfo))
		soap_serialize_PointerTons__StationInfo(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons__StationInfo(struct soap *soap, const char *tag, int id, struct ns__StationInfo **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons__StationInfo, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons__StationInfo(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__StationInfo *** SOAP_FMAC4 soap_in_PointerToPointerTons__StationInfo(struct soap *soap, const char *tag, struct ns__StationInfo ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__StationInfo ***)soap_malloc(soap, sizeof(struct ns__StationInfo **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons__StationInfo(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__StationInfo ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__StationInfo, sizeof(struct ns__StationInfo), 1, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons__StationInfo(struct soap *soap, struct ns__StationInfo **const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToPointerTons__StationInfo(soap, tag?tag:"ns:StationInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__StationInfo *** SOAP_FMAC4 soap_get_PointerToPointerTons__StationInfo(struct soap *soap, struct ns__StationInfo ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons__StationInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__StationInfo(struct soap *soap, struct ns__StationInfo *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__StationInfo))
		soap_serialize_ns__StationInfo(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__StationInfo(struct soap *soap, const char *tag, int id, struct ns__StationInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__StationInfo, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ns__StationInfo(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__StationInfo ** SOAP_FMAC4 soap_in_PointerTons__StationInfo(struct soap *soap, const char *tag, struct ns__StationInfo **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__StationInfo **)soap_malloc(soap, sizeof(struct ns__StationInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__StationInfo(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__StationInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__StationInfo, sizeof(struct ns__StationInfo), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__StationInfo(struct soap *soap, struct ns__StationInfo *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons__StationInfo(soap, tag?tag:"ns:StationInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__StationInfo ** SOAP_FMAC4 soap_get_PointerTons__StationInfo(struct soap *soap, struct ns__StationInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__StationInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons__ErrorTypeInfo(struct soap *soap, struct ns__ErrorTypeInfo **const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons__ErrorTypeInfo))
		soap_serialize_PointerTons__ErrorTypeInfo(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons__ErrorTypeInfo(struct soap *soap, const char *tag, int id, struct ns__ErrorTypeInfo **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons__ErrorTypeInfo, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons__ErrorTypeInfo(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__ErrorTypeInfo *** SOAP_FMAC4 soap_in_PointerToPointerTons__ErrorTypeInfo(struct soap *soap, const char *tag, struct ns__ErrorTypeInfo ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__ErrorTypeInfo ***)soap_malloc(soap, sizeof(struct ns__ErrorTypeInfo **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons__ErrorTypeInfo(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__ErrorTypeInfo ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__ErrorTypeInfo, sizeof(struct ns__ErrorTypeInfo), 1, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons__ErrorTypeInfo(struct soap *soap, struct ns__ErrorTypeInfo **const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToPointerTons__ErrorTypeInfo(soap, tag?tag:"ns:ErrorTypeInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__ErrorTypeInfo *** SOAP_FMAC4 soap_get_PointerToPointerTons__ErrorTypeInfo(struct soap *soap, struct ns__ErrorTypeInfo ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons__ErrorTypeInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ErrorTypeInfo(struct soap *soap, struct ns__ErrorTypeInfo *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__ErrorTypeInfo))
		soap_serialize_ns__ErrorTypeInfo(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ErrorTypeInfo(struct soap *soap, const char *tag, int id, struct ns__ErrorTypeInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__ErrorTypeInfo, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ns__ErrorTypeInfo(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__ErrorTypeInfo ** SOAP_FMAC4 soap_in_PointerTons__ErrorTypeInfo(struct soap *soap, const char *tag, struct ns__ErrorTypeInfo **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__ErrorTypeInfo **)soap_malloc(soap, sizeof(struct ns__ErrorTypeInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__ErrorTypeInfo(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__ErrorTypeInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__ErrorTypeInfo, sizeof(struct ns__ErrorTypeInfo), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ErrorTypeInfo(struct soap *soap, struct ns__ErrorTypeInfo *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons__ErrorTypeInfo(soap, tag?tag:"ns:ErrorTypeInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__ErrorTypeInfo ** SOAP_FMAC4 soap_get_PointerTons__ErrorTypeInfo(struct soap *soap, struct ns__ErrorTypeInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__ErrorTypeInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons__CameraInfo(struct soap *soap, struct ns__CameraInfo **const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons__CameraInfo))
		soap_serialize_PointerTons__CameraInfo(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons__CameraInfo(struct soap *soap, const char *tag, int id, struct ns__CameraInfo **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons__CameraInfo, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons__CameraInfo(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__CameraInfo *** SOAP_FMAC4 soap_in_PointerToPointerTons__CameraInfo(struct soap *soap, const char *tag, struct ns__CameraInfo ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__CameraInfo ***)soap_malloc(soap, sizeof(struct ns__CameraInfo **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons__CameraInfo(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__CameraInfo ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__CameraInfo, sizeof(struct ns__CameraInfo), 1, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons__CameraInfo(struct soap *soap, struct ns__CameraInfo **const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToPointerTons__CameraInfo(soap, tag?tag:"ns:CameraInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__CameraInfo *** SOAP_FMAC4 soap_get_PointerToPointerTons__CameraInfo(struct soap *soap, struct ns__CameraInfo ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons__CameraInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__CameraInfo(struct soap *soap, struct ns__CameraInfo *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__CameraInfo))
		soap_serialize_ns__CameraInfo(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__CameraInfo(struct soap *soap, const char *tag, int id, struct ns__CameraInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__CameraInfo, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ns__CameraInfo(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__CameraInfo ** SOAP_FMAC4 soap_in_PointerTons__CameraInfo(struct soap *soap, const char *tag, struct ns__CameraInfo **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__CameraInfo **)soap_malloc(soap, sizeof(struct ns__CameraInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__CameraInfo(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__CameraInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__CameraInfo, sizeof(struct ns__CameraInfo), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__CameraInfo(struct soap *soap, struct ns__CameraInfo *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons__CameraInfo(soap, tag?tag:"ns:CameraInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__CameraInfo ** SOAP_FMAC4 soap_get_PointerTons__CameraInfo(struct soap *soap, struct ns__CameraInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__CameraInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_xsd__string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_xsd__string(soap, tag?tag:"xsd:string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag?tag:"QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag?tag:"string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
