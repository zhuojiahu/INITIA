/* soapH.h
   Generated by gSOAP 2.8.25 from Demo_soap.h

gSOAP XML Web services tools
Copyright (C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( ((data) ? (soap_default_byte(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_byte(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( ((data) ? (soap_default_int(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_int(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (9)
#endif

#define soap_default_xsd__int(soap, a) soap_default_long(soap, a)


#define soap_xsd__int2s soap_long2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const long *, const char*);

#define soap_s2xsd__int soap_s2long

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, long *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap*, const long *, const char*, const char*);

#ifndef soap_write_xsd__int
#define soap_write_xsd__int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_xsd__int(soap, data, "xsd:int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_xsd__int(struct soap*, long *, const char*, const char*);

#ifndef soap_read_xsd__int
#define soap_read_xsd__int(soap, data) ( ((data) ? (soap_default_xsd__int(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xsd__int(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_long
#define SOAP_TYPE_long (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_long(struct soap*, long *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap*, const char*, int, const long *, const char*);
SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap*, const char*, long *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap*, const long *, const char*, const char*);

#ifndef soap_write_long
#define soap_write_long(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_long(soap, data, "long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap*, long *, const char*, const char*);

#ifndef soap_read_long
#define soap_read_long(soap, data) ( ((data) ? (soap_default_long(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_long(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Fault(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Reason(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Detail(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Code(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Header(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_ns__getInfo
#define SOAP_TYPE_ns__getInfo (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getInfo(struct soap*, struct ns__getInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getInfo(struct soap*, const struct ns__getInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getInfo(struct soap*, const char*, int, const struct ns__getInfo *, const char*);
SOAP_FMAC3 struct ns__getInfo * SOAP_FMAC4 soap_in_ns__getInfo(struct soap*, const char*, struct ns__getInfo *, const char*);
SOAP_FMAC1 struct ns__getInfo * SOAP_FMAC2 soap_instantiate_ns__getInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getInfo * soap_new_ns__getInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns__getInfo(soap, n, NULL, NULL, NULL); }

inline struct ns__getInfo * soap_new_req_ns__getInfo(
	struct soap *soap,
	int nOrder,
	int nReserveReq)
{	struct ns__getInfo *_p = soap_new_ns__getInfo(soap);
	if (_p)
	{	soap_default_ns__getInfo(soap, _p);
		_p->nOrder = nOrder;
		_p->nReserveReq = nReserveReq;
	}
	return _p;
}

inline struct ns__getInfo * soap_new_set_ns__getInfo(
	struct soap *soap,
	int nOrder,
	int nReserveReq)
{	struct ns__getInfo *_p = soap_new_ns__getInfo(soap);
	if (_p)
	{	soap_default_ns__getInfo(soap, _p);
		_p->nOrder = nOrder;
		_p->nReserveReq = nReserveReq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getInfo(struct soap*, const struct ns__getInfo *, const char*, const char*);

#ifndef soap_write_ns__getInfo
#define soap_write_ns__getInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getInfo(soap, data), 0) || soap_put_ns__getInfo(soap, data, "ns:getInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getInfo * SOAP_FMAC4 soap_get_ns__getInfo(struct soap*, struct ns__getInfo *, const char*, const char*);

#ifndef soap_read_ns__getInfo
#define soap_read_ns__getInfo(soap, data) ( ((data) ? (soap_default_ns__getInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__getInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__Detectinfo
#define SOAP_TYPE_ns__Detectinfo (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Detectinfo(struct soap*, struct ns__Detectinfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Detectinfo(struct soap*, const struct ns__Detectinfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Detectinfo(struct soap*, const char*, int, const struct ns__Detectinfo *, const char*);
SOAP_FMAC3 struct ns__Detectinfo * SOAP_FMAC4 soap_in_ns__Detectinfo(struct soap*, const char*, struct ns__Detectinfo *, const char*);
SOAP_FMAC1 struct ns__Detectinfo * SOAP_FMAC2 soap_instantiate_ns__Detectinfo(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__Detectinfo * soap_new_ns__Detectinfo(struct soap *soap, int n = -1) { return soap_instantiate_ns__Detectinfo(soap, n, NULL, NULL, NULL); }

inline struct ns__Detectinfo * soap_new_req_ns__Detectinfo(
	struct soap *soap,
	long nMouldNumber,
	long nCheckCount,
	long nKickCount,
	const struct S_CameraInfo& sCameraInfo,
	const struct S_ErrorTypeInfo& sErrorTypeInfo,
	const struct S_StationInfo& sStationInfo,
	long nReserveRes1,
	long nReserveRes2,
	long nReserveRes3)
{	struct ns__Detectinfo *_p = soap_new_ns__Detectinfo(soap);
	if (_p)
	{	soap_default_ns__Detectinfo(soap, _p);
		_p->nMouldNumber = nMouldNumber;
		_p->nCheckCount = nCheckCount;
		_p->nKickCount = nKickCount;
		_p->sCameraInfo = sCameraInfo;
		_p->sErrorTypeInfo = sErrorTypeInfo;
		_p->sStationInfo = sStationInfo;
		_p->nReserveRes1 = nReserveRes1;
		_p->nReserveRes2 = nReserveRes2;
		_p->nReserveRes3 = nReserveRes3;
	}
	return _p;
}

inline struct ns__Detectinfo * soap_new_set_ns__Detectinfo(
	struct soap *soap,
	long nMouldNumber,
	char *sMouldID,
	long nCheckCount,
	long nKickCount,
	const struct S_CameraInfo& sCameraInfo,
	const struct S_ErrorTypeInfo& sErrorTypeInfo,
	const struct S_StationInfo& sStationInfo,
	long nReserveRes1,
	long nReserveRes2,
	long nReserveRes3)
{	struct ns__Detectinfo *_p = soap_new_ns__Detectinfo(soap);
	if (_p)
	{	soap_default_ns__Detectinfo(soap, _p);
		_p->nMouldNumber = nMouldNumber;
		_p->sMouldID = sMouldID;
		_p->nCheckCount = nCheckCount;
		_p->nKickCount = nKickCount;
		_p->sCameraInfo = sCameraInfo;
		_p->sErrorTypeInfo = sErrorTypeInfo;
		_p->sStationInfo = sStationInfo;
		_p->nReserveRes1 = nReserveRes1;
		_p->nReserveRes2 = nReserveRes2;
		_p->nReserveRes3 = nReserveRes3;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Detectinfo(struct soap*, const struct ns__Detectinfo *, const char*, const char*);

#ifndef soap_write_ns__Detectinfo
#define soap_write_ns__Detectinfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__Detectinfo(soap, data), 0) || soap_put_ns__Detectinfo(soap, data, "ns:Detectinfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__Detectinfo * SOAP_FMAC4 soap_get_ns__Detectinfo(struct soap*, struct ns__Detectinfo *, const char*, const char*);

#ifndef soap_read_ns__Detectinfo
#define soap_read_ns__Detectinfo(soap, data) ( ((data) ? (soap_default_ns__Detectinfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__Detectinfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

/* xsd_StationInfo is a typedef synonym for StationInfo */

#ifndef SOAP_TYPE_xsd_StationInfo
#define SOAP_TYPE_xsd_StationInfo (33)
#endif

#define soap_default_xsd_StationInfo(soap, a) soap_default_StationInfo(soap, a)


#define soap_serialize_xsd_StationInfo soap_serialize_StationInfo


#define soap_xsd_StationInfo2s soap_StationInfo2s


#define soap_out_xsd_StationInfo soap_out_StationInfo


#define soap_s2xsd_StationInfo soap_s2StationInfo


#define soap_in_xsd_StationInfo soap_in_StationInfo


#define soap_instantiate_xsd_StationInfo soap_instantiate_StationInfo


#define soap_new_xsd_StationInfo soap_new_StationInfo


#define soap_new_req_xsd_StationInfo soap_new_req_StationInfo


#define soap_new_set_xsd_StationInfo soap_new_set_StationInfo


#define soap_put_xsd_StationInfo soap_put_StationInfo


#define soap_write_xsd_StationInfo soap_write_StationInfo


#define soap_get_xsd_StationInfo soap_get_StationInfo


#define soap_read_xsd_StationInfo soap_read_StationInfo


#ifndef SOAP_TYPE_StationInfo
#define SOAP_TYPE_StationInfo (32)
#endif

#define soap_default_StationInfo(soap, a) soap_default_S_StationInfo(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_StationInfo(struct soap*, const struct S_StationInfo *);

#define soap_StationInfo2s soap_S_StationInfo2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_StationInfo(struct soap*, const char*, int, const struct S_StationInfo *, const char*);

#define soap_s2StationInfo soap_s2S_StationInfo

SOAP_FMAC3 struct S_StationInfo * SOAP_FMAC4 soap_in_StationInfo(struct soap*, const char*, struct S_StationInfo *, const char*);

#define soap_instantiate_StationInfo soap_instantiate_S_StationInfo


#define soap_new_StationInfo soap_new_S_StationInfo


#define soap_new_req_StationInfo soap_new_req_S_StationInfo


#define soap_new_set_StationInfo soap_new_set_S_StationInfo

SOAP_FMAC3 int SOAP_FMAC4 soap_put_StationInfo(struct soap*, const struct S_StationInfo *, const char*, const char*);

#ifndef soap_write_StationInfo
#define soap_write_StationInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_StationInfo(soap, data), 0) || soap_put_StationInfo(soap, data, "StationInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct S_StationInfo * SOAP_FMAC4 soap_get_StationInfo(struct soap*, struct S_StationInfo *, const char*, const char*);

#ifndef soap_read_StationInfo
#define soap_read_StationInfo(soap, data) ( ((data) ? (soap_default_StationInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_StationInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_S_StationInfo
#define SOAP_TYPE_S_StationInfo (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_S_StationInfo(struct soap*, struct S_StationInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_S_StationInfo(struct soap*, const struct S_StationInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_S_StationInfo(struct soap*, const char*, int, const struct S_StationInfo *, const char*);
SOAP_FMAC3 struct S_StationInfo * SOAP_FMAC4 soap_in_S_StationInfo(struct soap*, const char*, struct S_StationInfo *, const char*);
SOAP_FMAC1 struct S_StationInfo * SOAP_FMAC2 soap_instantiate_S_StationInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct S_StationInfo * soap_new_S_StationInfo(struct soap *soap, int n = -1) { return soap_instantiate_S_StationInfo(soap, n, NULL, NULL, NULL); }

inline struct S_StationInfo * soap_new_req_S_StationInfo(
	struct soap *soap,
	int nStationCount,
	const struct S_ArrayOfStationInfo& sStationInfoArray)
{	struct S_StationInfo *_p = soap_new_S_StationInfo(soap);
	if (_p)
	{	soap_default_S_StationInfo(soap, _p);
		_p->nStationCount = nStationCount;
		_p->sStationInfoArray = sStationInfoArray;
	}
	return _p;
}

inline struct S_StationInfo * soap_new_set_S_StationInfo(
	struct soap *soap,
	int nStationCount,
	const struct S_ArrayOfStationInfo& sStationInfoArray)
{	struct S_StationInfo *_p = soap_new_S_StationInfo(soap);
	if (_p)
	{	soap_default_S_StationInfo(soap, _p);
		_p->nStationCount = nStationCount;
		_p->sStationInfoArray = sStationInfoArray;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_S_StationInfo(struct soap*, const struct S_StationInfo *, const char*, const char*);

#ifndef soap_write_S_StationInfo
#define soap_write_S_StationInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_S_StationInfo(soap, data), 0) || soap_put_S_StationInfo(soap, data, "S-StationInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct S_StationInfo * SOAP_FMAC4 soap_get_S_StationInfo(struct soap*, struct S_StationInfo *, const char*, const char*);

#ifndef soap_read_S_StationInfo
#define soap_read_S_StationInfo(soap, data) ( ((data) ? (soap_default_S_StationInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_S_StationInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ArrayOfStationInfo
#define SOAP_TYPE_ArrayOfStationInfo (30)
#endif

#define soap_default_ArrayOfStationInfo(soap, a) soap_default_S_ArrayOfStationInfo(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ArrayOfStationInfo(struct soap*, const struct S_ArrayOfStationInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfStationInfo(struct soap*, const char*, int, const struct S_ArrayOfStationInfo *, const char*);
SOAP_FMAC3 struct S_ArrayOfStationInfo * SOAP_FMAC4 soap_in_ArrayOfStationInfo(struct soap*, const char*, struct S_ArrayOfStationInfo *, const char*);

#define soap_instantiate_ArrayOfStationInfo soap_instantiate_S_ArrayOfStationInfo


#define soap_new_ArrayOfStationInfo soap_new_S_ArrayOfStationInfo


#define soap_new_req_ArrayOfStationInfo soap_new_req_S_ArrayOfStationInfo


#define soap_new_set_ArrayOfStationInfo soap_new_set_S_ArrayOfStationInfo

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ArrayOfStationInfo(struct soap*, const struct S_ArrayOfStationInfo *, const char*, const char*);

#ifndef soap_write_ArrayOfStationInfo
#define soap_write_ArrayOfStationInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ArrayOfStationInfo(soap, data), 0) || soap_put_ArrayOfStationInfo(soap, data, "ArrayOfStationInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct S_ArrayOfStationInfo * SOAP_FMAC4 soap_get_ArrayOfStationInfo(struct soap*, struct S_ArrayOfStationInfo *, const char*, const char*);

#ifndef soap_read_ArrayOfStationInfo
#define soap_read_ArrayOfStationInfo(soap, data) ( ((data) ? (soap_default_ArrayOfStationInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ArrayOfStationInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_S_ArrayOfStationInfo
#define SOAP_TYPE_S_ArrayOfStationInfo (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_S_ArrayOfStationInfo(struct soap*, struct S_ArrayOfStationInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_S_ArrayOfStationInfo(struct soap*, const struct S_ArrayOfStationInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_S_ArrayOfStationInfo(struct soap*, const char*, int, const struct S_ArrayOfStationInfo *, const char*);
SOAP_FMAC3 struct S_ArrayOfStationInfo * SOAP_FMAC4 soap_in_S_ArrayOfStationInfo(struct soap*, const char*, struct S_ArrayOfStationInfo *, const char*);
SOAP_FMAC1 struct S_ArrayOfStationInfo * SOAP_FMAC2 soap_instantiate_S_ArrayOfStationInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct S_ArrayOfStationInfo * soap_new_S_ArrayOfStationInfo(struct soap *soap, int n = -1) { return soap_instantiate_S_ArrayOfStationInfo(soap, n, NULL, NULL, NULL); }

inline struct S_ArrayOfStationInfo * soap_new_req_S_ArrayOfStationInfo(
	struct soap *soap)
{	struct S_ArrayOfStationInfo *_p = soap_new_S_ArrayOfStationInfo(soap);
	if (_p)
	{	soap_default_S_ArrayOfStationInfo(soap, _p);
	}
	return _p;
}

inline struct S_ArrayOfStationInfo * soap_new_set_S_ArrayOfStationInfo(
	struct soap *soap,
	struct ns__StationInfo **__ptr,
	int __size)
{	struct S_ArrayOfStationInfo *_p = soap_new_S_ArrayOfStationInfo(soap);
	if (_p)
	{	soap_default_S_ArrayOfStationInfo(soap, _p);
		_p->__ptr = __ptr;
		_p->__size = __size;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_S_ArrayOfStationInfo(struct soap*, const struct S_ArrayOfStationInfo *, const char*, const char*);

#ifndef soap_write_S_ArrayOfStationInfo
#define soap_write_S_ArrayOfStationInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_S_ArrayOfStationInfo(soap, data), 0) || soap_put_S_ArrayOfStationInfo(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct S_ArrayOfStationInfo * SOAP_FMAC4 soap_get_S_ArrayOfStationInfo(struct soap*, struct S_ArrayOfStationInfo *, const char*, const char*);

#ifndef soap_read_S_ArrayOfStationInfo
#define soap_read_S_ArrayOfStationInfo(soap, data) ( ((data) ? (soap_default_S_ArrayOfStationInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_S_ArrayOfStationInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__StationInfo
#define SOAP_TYPE_ns__StationInfo (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__StationInfo(struct soap*, struct ns__StationInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__StationInfo(struct soap*, const struct ns__StationInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__StationInfo(struct soap*, const char*, int, const struct ns__StationInfo *, const char*);
SOAP_FMAC3 struct ns__StationInfo * SOAP_FMAC4 soap_in_ns__StationInfo(struct soap*, const char*, struct ns__StationInfo *, const char*);
SOAP_FMAC1 struct ns__StationInfo * SOAP_FMAC2 soap_instantiate_ns__StationInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__StationInfo * soap_new_ns__StationInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns__StationInfo(soap, n, NULL, NULL, NULL); }

inline struct ns__StationInfo * soap_new_req_ns__StationInfo(
	struct soap *soap,
	int nStationCheckCount,
	int nStationKickCount)
{	struct ns__StationInfo *_p = soap_new_ns__StationInfo(soap);
	if (_p)
	{	soap_default_ns__StationInfo(soap, _p);
		_p->nStationCheckCount = nStationCheckCount;
		_p->nStationKickCount = nStationKickCount;
	}
	return _p;
}

inline struct ns__StationInfo * soap_new_set_ns__StationInfo(
	struct soap *soap,
	char *sStationLabel,
	int nStationCheckCount,
	int nStationKickCount)
{	struct ns__StationInfo *_p = soap_new_ns__StationInfo(soap);
	if (_p)
	{	soap_default_ns__StationInfo(soap, _p);
		_p->sStationLabel = sStationLabel;
		_p->nStationCheckCount = nStationCheckCount;
		_p->nStationKickCount = nStationKickCount;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__StationInfo(struct soap*, const struct ns__StationInfo *, const char*, const char*);

#ifndef soap_write_ns__StationInfo
#define soap_write_ns__StationInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__StationInfo(soap, data), 0) || soap_put_ns__StationInfo(soap, data, "ns:StationInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__StationInfo * SOAP_FMAC4 soap_get_ns__StationInfo(struct soap*, struct ns__StationInfo *, const char*, const char*);

#ifndef soap_read_ns__StationInfo
#define soap_read_ns__StationInfo(soap, data) ( ((data) ? (soap_default_ns__StationInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__StationInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

/* xsd_ErrorTypeInfo is a typedef synonym for ErrorTypeInfo */

#ifndef SOAP_TYPE_xsd_ErrorTypeInfo
#define SOAP_TYPE_xsd_ErrorTypeInfo (25)
#endif

#define soap_default_xsd_ErrorTypeInfo(soap, a) soap_default_ErrorTypeInfo(soap, a)


#define soap_serialize_xsd_ErrorTypeInfo soap_serialize_ErrorTypeInfo


#define soap_xsd_ErrorTypeInfo2s soap_ErrorTypeInfo2s


#define soap_out_xsd_ErrorTypeInfo soap_out_ErrorTypeInfo


#define soap_s2xsd_ErrorTypeInfo soap_s2ErrorTypeInfo


#define soap_in_xsd_ErrorTypeInfo soap_in_ErrorTypeInfo


#define soap_instantiate_xsd_ErrorTypeInfo soap_instantiate_ErrorTypeInfo


#define soap_new_xsd_ErrorTypeInfo soap_new_ErrorTypeInfo


#define soap_new_req_xsd_ErrorTypeInfo soap_new_req_ErrorTypeInfo


#define soap_new_set_xsd_ErrorTypeInfo soap_new_set_ErrorTypeInfo


#define soap_put_xsd_ErrorTypeInfo soap_put_ErrorTypeInfo


#define soap_write_xsd_ErrorTypeInfo soap_write_ErrorTypeInfo


#define soap_get_xsd_ErrorTypeInfo soap_get_ErrorTypeInfo


#define soap_read_xsd_ErrorTypeInfo soap_read_ErrorTypeInfo


#ifndef SOAP_TYPE_ErrorTypeInfo
#define SOAP_TYPE_ErrorTypeInfo (24)
#endif

#define soap_default_ErrorTypeInfo(soap, a) soap_default_S_ErrorTypeInfo(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ErrorTypeInfo(struct soap*, const struct S_ErrorTypeInfo *);

#define soap_ErrorTypeInfo2s soap_S_ErrorTypeInfo2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ErrorTypeInfo(struct soap*, const char*, int, const struct S_ErrorTypeInfo *, const char*);

#define soap_s2ErrorTypeInfo soap_s2S_ErrorTypeInfo

SOAP_FMAC3 struct S_ErrorTypeInfo * SOAP_FMAC4 soap_in_ErrorTypeInfo(struct soap*, const char*, struct S_ErrorTypeInfo *, const char*);

#define soap_instantiate_ErrorTypeInfo soap_instantiate_S_ErrorTypeInfo


#define soap_new_ErrorTypeInfo soap_new_S_ErrorTypeInfo


#define soap_new_req_ErrorTypeInfo soap_new_req_S_ErrorTypeInfo


#define soap_new_set_ErrorTypeInfo soap_new_set_S_ErrorTypeInfo

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ErrorTypeInfo(struct soap*, const struct S_ErrorTypeInfo *, const char*, const char*);

#ifndef soap_write_ErrorTypeInfo
#define soap_write_ErrorTypeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ErrorTypeInfo(soap, data), 0) || soap_put_ErrorTypeInfo(soap, data, "ErrorTypeInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct S_ErrorTypeInfo * SOAP_FMAC4 soap_get_ErrorTypeInfo(struct soap*, struct S_ErrorTypeInfo *, const char*, const char*);

#ifndef soap_read_ErrorTypeInfo
#define soap_read_ErrorTypeInfo(soap, data) ( ((data) ? (soap_default_ErrorTypeInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ErrorTypeInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_S_ErrorTypeInfo
#define SOAP_TYPE_S_ErrorTypeInfo (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_S_ErrorTypeInfo(struct soap*, struct S_ErrorTypeInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_S_ErrorTypeInfo(struct soap*, const struct S_ErrorTypeInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_S_ErrorTypeInfo(struct soap*, const char*, int, const struct S_ErrorTypeInfo *, const char*);
SOAP_FMAC3 struct S_ErrorTypeInfo * SOAP_FMAC4 soap_in_S_ErrorTypeInfo(struct soap*, const char*, struct S_ErrorTypeInfo *, const char*);
SOAP_FMAC1 struct S_ErrorTypeInfo * SOAP_FMAC2 soap_instantiate_S_ErrorTypeInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct S_ErrorTypeInfo * soap_new_S_ErrorTypeInfo(struct soap *soap, int n = -1) { return soap_instantiate_S_ErrorTypeInfo(soap, n, NULL, NULL, NULL); }

inline struct S_ErrorTypeInfo * soap_new_req_S_ErrorTypeInfo(
	struct soap *soap,
	int nErrorTypeCount,
	const struct S_ArrayOfErrorTypeInfo& sErrorTypeInfoArray)
{	struct S_ErrorTypeInfo *_p = soap_new_S_ErrorTypeInfo(soap);
	if (_p)
	{	soap_default_S_ErrorTypeInfo(soap, _p);
		_p->nErrorTypeCount = nErrorTypeCount;
		_p->sErrorTypeInfoArray = sErrorTypeInfoArray;
	}
	return _p;
}

inline struct S_ErrorTypeInfo * soap_new_set_S_ErrorTypeInfo(
	struct soap *soap,
	int nErrorTypeCount,
	const struct S_ArrayOfErrorTypeInfo& sErrorTypeInfoArray)
{	struct S_ErrorTypeInfo *_p = soap_new_S_ErrorTypeInfo(soap);
	if (_p)
	{	soap_default_S_ErrorTypeInfo(soap, _p);
		_p->nErrorTypeCount = nErrorTypeCount;
		_p->sErrorTypeInfoArray = sErrorTypeInfoArray;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_S_ErrorTypeInfo(struct soap*, const struct S_ErrorTypeInfo *, const char*, const char*);

#ifndef soap_write_S_ErrorTypeInfo
#define soap_write_S_ErrorTypeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_S_ErrorTypeInfo(soap, data), 0) || soap_put_S_ErrorTypeInfo(soap, data, "S-ErrorTypeInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct S_ErrorTypeInfo * SOAP_FMAC4 soap_get_S_ErrorTypeInfo(struct soap*, struct S_ErrorTypeInfo *, const char*, const char*);

#ifndef soap_read_S_ErrorTypeInfo
#define soap_read_S_ErrorTypeInfo(soap, data) ( ((data) ? (soap_default_S_ErrorTypeInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_S_ErrorTypeInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ArrayOfErrorTypeInfo
#define SOAP_TYPE_ArrayOfErrorTypeInfo (22)
#endif

#define soap_default_ArrayOfErrorTypeInfo(soap, a) soap_default_S_ArrayOfErrorTypeInfo(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ArrayOfErrorTypeInfo(struct soap*, const struct S_ArrayOfErrorTypeInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfErrorTypeInfo(struct soap*, const char*, int, const struct S_ArrayOfErrorTypeInfo *, const char*);
SOAP_FMAC3 struct S_ArrayOfErrorTypeInfo * SOAP_FMAC4 soap_in_ArrayOfErrorTypeInfo(struct soap*, const char*, struct S_ArrayOfErrorTypeInfo *, const char*);

#define soap_instantiate_ArrayOfErrorTypeInfo soap_instantiate_S_ArrayOfErrorTypeInfo


#define soap_new_ArrayOfErrorTypeInfo soap_new_S_ArrayOfErrorTypeInfo


#define soap_new_req_ArrayOfErrorTypeInfo soap_new_req_S_ArrayOfErrorTypeInfo


#define soap_new_set_ArrayOfErrorTypeInfo soap_new_set_S_ArrayOfErrorTypeInfo

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ArrayOfErrorTypeInfo(struct soap*, const struct S_ArrayOfErrorTypeInfo *, const char*, const char*);

#ifndef soap_write_ArrayOfErrorTypeInfo
#define soap_write_ArrayOfErrorTypeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ArrayOfErrorTypeInfo(soap, data), 0) || soap_put_ArrayOfErrorTypeInfo(soap, data, "ArrayOfErrorTypeInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct S_ArrayOfErrorTypeInfo * SOAP_FMAC4 soap_get_ArrayOfErrorTypeInfo(struct soap*, struct S_ArrayOfErrorTypeInfo *, const char*, const char*);

#ifndef soap_read_ArrayOfErrorTypeInfo
#define soap_read_ArrayOfErrorTypeInfo(soap, data) ( ((data) ? (soap_default_ArrayOfErrorTypeInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ArrayOfErrorTypeInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_S_ArrayOfErrorTypeInfo
#define SOAP_TYPE_S_ArrayOfErrorTypeInfo (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_S_ArrayOfErrorTypeInfo(struct soap*, struct S_ArrayOfErrorTypeInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_S_ArrayOfErrorTypeInfo(struct soap*, const struct S_ArrayOfErrorTypeInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_S_ArrayOfErrorTypeInfo(struct soap*, const char*, int, const struct S_ArrayOfErrorTypeInfo *, const char*);
SOAP_FMAC3 struct S_ArrayOfErrorTypeInfo * SOAP_FMAC4 soap_in_S_ArrayOfErrorTypeInfo(struct soap*, const char*, struct S_ArrayOfErrorTypeInfo *, const char*);
SOAP_FMAC1 struct S_ArrayOfErrorTypeInfo * SOAP_FMAC2 soap_instantiate_S_ArrayOfErrorTypeInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct S_ArrayOfErrorTypeInfo * soap_new_S_ArrayOfErrorTypeInfo(struct soap *soap, int n = -1) { return soap_instantiate_S_ArrayOfErrorTypeInfo(soap, n, NULL, NULL, NULL); }

inline struct S_ArrayOfErrorTypeInfo * soap_new_req_S_ArrayOfErrorTypeInfo(
	struct soap *soap)
{	struct S_ArrayOfErrorTypeInfo *_p = soap_new_S_ArrayOfErrorTypeInfo(soap);
	if (_p)
	{	soap_default_S_ArrayOfErrorTypeInfo(soap, _p);
	}
	return _p;
}

inline struct S_ArrayOfErrorTypeInfo * soap_new_set_S_ArrayOfErrorTypeInfo(
	struct soap *soap,
	struct ns__ErrorTypeInfo **__ptr,
	int __size)
{	struct S_ArrayOfErrorTypeInfo *_p = soap_new_S_ArrayOfErrorTypeInfo(soap);
	if (_p)
	{	soap_default_S_ArrayOfErrorTypeInfo(soap, _p);
		_p->__ptr = __ptr;
		_p->__size = __size;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_S_ArrayOfErrorTypeInfo(struct soap*, const struct S_ArrayOfErrorTypeInfo *, const char*, const char*);

#ifndef soap_write_S_ArrayOfErrorTypeInfo
#define soap_write_S_ArrayOfErrorTypeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_S_ArrayOfErrorTypeInfo(soap, data), 0) || soap_put_S_ArrayOfErrorTypeInfo(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct S_ArrayOfErrorTypeInfo * SOAP_FMAC4 soap_get_S_ArrayOfErrorTypeInfo(struct soap*, struct S_ArrayOfErrorTypeInfo *, const char*, const char*);

#ifndef soap_read_S_ArrayOfErrorTypeInfo
#define soap_read_S_ArrayOfErrorTypeInfo(soap, data) ( ((data) ? (soap_default_S_ArrayOfErrorTypeInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_S_ArrayOfErrorTypeInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ErrorTypeInfo
#define SOAP_TYPE_ns__ErrorTypeInfo (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__ErrorTypeInfo(struct soap*, struct ns__ErrorTypeInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__ErrorTypeInfo(struct soap*, const struct ns__ErrorTypeInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ErrorTypeInfo(struct soap*, const char*, int, const struct ns__ErrorTypeInfo *, const char*);
SOAP_FMAC3 struct ns__ErrorTypeInfo * SOAP_FMAC4 soap_in_ns__ErrorTypeInfo(struct soap*, const char*, struct ns__ErrorTypeInfo *, const char*);
SOAP_FMAC1 struct ns__ErrorTypeInfo * SOAP_FMAC2 soap_instantiate_ns__ErrorTypeInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__ErrorTypeInfo * soap_new_ns__ErrorTypeInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns__ErrorTypeInfo(soap, n, NULL, NULL, NULL); }

inline struct ns__ErrorTypeInfo * soap_new_req_ns__ErrorTypeInfo(
	struct soap *soap,
	int nErrorTypeClass,
	int nErrorTypeKickCount)
{	struct ns__ErrorTypeInfo *_p = soap_new_ns__ErrorTypeInfo(soap);
	if (_p)
	{	soap_default_ns__ErrorTypeInfo(soap, _p);
		_p->nErrorTypeClass = nErrorTypeClass;
		_p->nErrorTypeKickCount = nErrorTypeKickCount;
	}
	return _p;
}

inline struct ns__ErrorTypeInfo * soap_new_set_ns__ErrorTypeInfo(
	struct soap *soap,
	char *sErrorTypeName,
	int nErrorTypeClass,
	int nErrorTypeKickCount)
{	struct ns__ErrorTypeInfo *_p = soap_new_ns__ErrorTypeInfo(soap);
	if (_p)
	{	soap_default_ns__ErrorTypeInfo(soap, _p);
		_p->sErrorTypeName = sErrorTypeName;
		_p->nErrorTypeClass = nErrorTypeClass;
		_p->nErrorTypeKickCount = nErrorTypeKickCount;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__ErrorTypeInfo(struct soap*, const struct ns__ErrorTypeInfo *, const char*, const char*);

#ifndef soap_write_ns__ErrorTypeInfo
#define soap_write_ns__ErrorTypeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__ErrorTypeInfo(soap, data), 0) || soap_put_ns__ErrorTypeInfo(soap, data, "ns:ErrorTypeInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__ErrorTypeInfo * SOAP_FMAC4 soap_get_ns__ErrorTypeInfo(struct soap*, struct ns__ErrorTypeInfo *, const char*, const char*);

#ifndef soap_read_ns__ErrorTypeInfo
#define soap_read_ns__ErrorTypeInfo(soap, data) ( ((data) ? (soap_default_ns__ErrorTypeInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__ErrorTypeInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

/* xsd_CameraInfo is a typedef synonym for CameraInfo */

#ifndef SOAP_TYPE_xsd_CameraInfo
#define SOAP_TYPE_xsd_CameraInfo (17)
#endif

#define soap_default_xsd_CameraInfo(soap, a) soap_default_CameraInfo(soap, a)


#define soap_serialize_xsd_CameraInfo soap_serialize_CameraInfo


#define soap_xsd_CameraInfo2s soap_CameraInfo2s


#define soap_out_xsd_CameraInfo soap_out_CameraInfo


#define soap_s2xsd_CameraInfo soap_s2CameraInfo


#define soap_in_xsd_CameraInfo soap_in_CameraInfo


#define soap_instantiate_xsd_CameraInfo soap_instantiate_CameraInfo


#define soap_new_xsd_CameraInfo soap_new_CameraInfo


#define soap_new_req_xsd_CameraInfo soap_new_req_CameraInfo


#define soap_new_set_xsd_CameraInfo soap_new_set_CameraInfo


#define soap_put_xsd_CameraInfo soap_put_CameraInfo


#define soap_write_xsd_CameraInfo soap_write_CameraInfo


#define soap_get_xsd_CameraInfo soap_get_CameraInfo


#define soap_read_xsd_CameraInfo soap_read_CameraInfo


#ifndef SOAP_TYPE_CameraInfo
#define SOAP_TYPE_CameraInfo (16)
#endif

#define soap_default_CameraInfo(soap, a) soap_default_S_CameraInfo(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_CameraInfo(struct soap*, const struct S_CameraInfo *);

#define soap_CameraInfo2s soap_S_CameraInfo2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_CameraInfo(struct soap*, const char*, int, const struct S_CameraInfo *, const char*);

#define soap_s2CameraInfo soap_s2S_CameraInfo

SOAP_FMAC3 struct S_CameraInfo * SOAP_FMAC4 soap_in_CameraInfo(struct soap*, const char*, struct S_CameraInfo *, const char*);

#define soap_instantiate_CameraInfo soap_instantiate_S_CameraInfo


#define soap_new_CameraInfo soap_new_S_CameraInfo


#define soap_new_req_CameraInfo soap_new_req_S_CameraInfo


#define soap_new_set_CameraInfo soap_new_set_S_CameraInfo

SOAP_FMAC3 int SOAP_FMAC4 soap_put_CameraInfo(struct soap*, const struct S_CameraInfo *, const char*, const char*);

#ifndef soap_write_CameraInfo
#define soap_write_CameraInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_CameraInfo(soap, data), 0) || soap_put_CameraInfo(soap, data, "CameraInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct S_CameraInfo * SOAP_FMAC4 soap_get_CameraInfo(struct soap*, struct S_CameraInfo *, const char*, const char*);

#ifndef soap_read_CameraInfo
#define soap_read_CameraInfo(soap, data) ( ((data) ? (soap_default_CameraInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_CameraInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_S_CameraInfo
#define SOAP_TYPE_S_CameraInfo (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_S_CameraInfo(struct soap*, struct S_CameraInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_S_CameraInfo(struct soap*, const struct S_CameraInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_S_CameraInfo(struct soap*, const char*, int, const struct S_CameraInfo *, const char*);
SOAP_FMAC3 struct S_CameraInfo * SOAP_FMAC4 soap_in_S_CameraInfo(struct soap*, const char*, struct S_CameraInfo *, const char*);
SOAP_FMAC1 struct S_CameraInfo * SOAP_FMAC2 soap_instantiate_S_CameraInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct S_CameraInfo * soap_new_S_CameraInfo(struct soap *soap, int n = -1) { return soap_instantiate_S_CameraInfo(soap, n, NULL, NULL, NULL); }

inline struct S_CameraInfo * soap_new_req_S_CameraInfo(
	struct soap *soap,
	int nCameraCount,
	const struct S_ArrayOfCameraInfo& sCameraInfoArray)
{	struct S_CameraInfo *_p = soap_new_S_CameraInfo(soap);
	if (_p)
	{	soap_default_S_CameraInfo(soap, _p);
		_p->nCameraCount = nCameraCount;
		_p->sCameraInfoArray = sCameraInfoArray;
	}
	return _p;
}

inline struct S_CameraInfo * soap_new_set_S_CameraInfo(
	struct soap *soap,
	int nCameraCount,
	const struct S_ArrayOfCameraInfo& sCameraInfoArray)
{	struct S_CameraInfo *_p = soap_new_S_CameraInfo(soap);
	if (_p)
	{	soap_default_S_CameraInfo(soap, _p);
		_p->nCameraCount = nCameraCount;
		_p->sCameraInfoArray = sCameraInfoArray;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_S_CameraInfo(struct soap*, const struct S_CameraInfo *, const char*, const char*);

#ifndef soap_write_S_CameraInfo
#define soap_write_S_CameraInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_S_CameraInfo(soap, data), 0) || soap_put_S_CameraInfo(soap, data, "S-CameraInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct S_CameraInfo * SOAP_FMAC4 soap_get_S_CameraInfo(struct soap*, struct S_CameraInfo *, const char*, const char*);

#ifndef soap_read_S_CameraInfo
#define soap_read_S_CameraInfo(soap, data) ( ((data) ? (soap_default_S_CameraInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_S_CameraInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ArrayOfCameraInfo
#define SOAP_TYPE_ArrayOfCameraInfo (14)
#endif

#define soap_default_ArrayOfCameraInfo(soap, a) soap_default_S_ArrayOfCameraInfo(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ArrayOfCameraInfo(struct soap*, const struct S_ArrayOfCameraInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCameraInfo(struct soap*, const char*, int, const struct S_ArrayOfCameraInfo *, const char*);
SOAP_FMAC3 struct S_ArrayOfCameraInfo * SOAP_FMAC4 soap_in_ArrayOfCameraInfo(struct soap*, const char*, struct S_ArrayOfCameraInfo *, const char*);

#define soap_instantiate_ArrayOfCameraInfo soap_instantiate_S_ArrayOfCameraInfo


#define soap_new_ArrayOfCameraInfo soap_new_S_ArrayOfCameraInfo


#define soap_new_req_ArrayOfCameraInfo soap_new_req_S_ArrayOfCameraInfo


#define soap_new_set_ArrayOfCameraInfo soap_new_set_S_ArrayOfCameraInfo

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ArrayOfCameraInfo(struct soap*, const struct S_ArrayOfCameraInfo *, const char*, const char*);

#ifndef soap_write_ArrayOfCameraInfo
#define soap_write_ArrayOfCameraInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ArrayOfCameraInfo(soap, data), 0) || soap_put_ArrayOfCameraInfo(soap, data, "ArrayOfCameraInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct S_ArrayOfCameraInfo * SOAP_FMAC4 soap_get_ArrayOfCameraInfo(struct soap*, struct S_ArrayOfCameraInfo *, const char*, const char*);

#ifndef soap_read_ArrayOfCameraInfo
#define soap_read_ArrayOfCameraInfo(soap, data) ( ((data) ? (soap_default_ArrayOfCameraInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ArrayOfCameraInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_S_ArrayOfCameraInfo
#define SOAP_TYPE_S_ArrayOfCameraInfo (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_S_ArrayOfCameraInfo(struct soap*, struct S_ArrayOfCameraInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_S_ArrayOfCameraInfo(struct soap*, const struct S_ArrayOfCameraInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_S_ArrayOfCameraInfo(struct soap*, const char*, int, const struct S_ArrayOfCameraInfo *, const char*);
SOAP_FMAC3 struct S_ArrayOfCameraInfo * SOAP_FMAC4 soap_in_S_ArrayOfCameraInfo(struct soap*, const char*, struct S_ArrayOfCameraInfo *, const char*);
SOAP_FMAC1 struct S_ArrayOfCameraInfo * SOAP_FMAC2 soap_instantiate_S_ArrayOfCameraInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct S_ArrayOfCameraInfo * soap_new_S_ArrayOfCameraInfo(struct soap *soap, int n = -1) { return soap_instantiate_S_ArrayOfCameraInfo(soap, n, NULL, NULL, NULL); }

inline struct S_ArrayOfCameraInfo * soap_new_req_S_ArrayOfCameraInfo(
	struct soap *soap)
{	struct S_ArrayOfCameraInfo *_p = soap_new_S_ArrayOfCameraInfo(soap);
	if (_p)
	{	soap_default_S_ArrayOfCameraInfo(soap, _p);
	}
	return _p;
}

inline struct S_ArrayOfCameraInfo * soap_new_set_S_ArrayOfCameraInfo(
	struct soap *soap,
	struct ns__CameraInfo **__ptr,
	int __size)
{	struct S_ArrayOfCameraInfo *_p = soap_new_S_ArrayOfCameraInfo(soap);
	if (_p)
	{	soap_default_S_ArrayOfCameraInfo(soap, _p);
		_p->__ptr = __ptr;
		_p->__size = __size;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_S_ArrayOfCameraInfo(struct soap*, const struct S_ArrayOfCameraInfo *, const char*, const char*);

#ifndef soap_write_S_ArrayOfCameraInfo
#define soap_write_S_ArrayOfCameraInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_S_ArrayOfCameraInfo(soap, data), 0) || soap_put_S_ArrayOfCameraInfo(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct S_ArrayOfCameraInfo * SOAP_FMAC4 soap_get_S_ArrayOfCameraInfo(struct soap*, struct S_ArrayOfCameraInfo *, const char*, const char*);

#ifndef soap_read_S_ArrayOfCameraInfo
#define soap_read_S_ArrayOfCameraInfo(soap, data) ( ((data) ? (soap_default_S_ArrayOfCameraInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_S_ArrayOfCameraInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__CameraInfo
#define SOAP_TYPE_ns__CameraInfo (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__CameraInfo(struct soap*, struct ns__CameraInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__CameraInfo(struct soap*, const struct ns__CameraInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__CameraInfo(struct soap*, const char*, int, const struct ns__CameraInfo *, const char*);
SOAP_FMAC3 struct ns__CameraInfo * SOAP_FMAC4 soap_in_ns__CameraInfo(struct soap*, const char*, struct ns__CameraInfo *, const char*);
SOAP_FMAC1 struct ns__CameraInfo * SOAP_FMAC2 soap_instantiate_ns__CameraInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__CameraInfo * soap_new_ns__CameraInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns__CameraInfo(soap, n, NULL, NULL, NULL); }

inline struct ns__CameraInfo * soap_new_req_ns__CameraInfo(
	struct soap *soap,
	int nCheckCount,
	int nKickCount)
{	struct ns__CameraInfo *_p = soap_new_ns__CameraInfo(soap);
	if (_p)
	{	soap_default_ns__CameraInfo(soap, _p);
		_p->nCheckCount = nCheckCount;
		_p->nKickCount = nKickCount;
	}
	return _p;
}

inline struct ns__CameraInfo * soap_new_set_ns__CameraInfo(
	struct soap *soap,
	char *sCameraLabel,
	int nCheckCount,
	int nKickCount)
{	struct ns__CameraInfo *_p = soap_new_ns__CameraInfo(soap);
	if (_p)
	{	soap_default_ns__CameraInfo(soap, _p);
		_p->sCameraLabel = sCameraLabel;
		_p->nCheckCount = nCheckCount;
		_p->nKickCount = nKickCount;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__CameraInfo(struct soap*, const struct ns__CameraInfo *, const char*, const char*);

#ifndef soap_write_ns__CameraInfo
#define soap_write_ns__CameraInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__CameraInfo(soap, data), 0) || soap_put_ns__CameraInfo(soap, data, "ns:CameraInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__CameraInfo * SOAP_FMAC4 soap_get_ns__CameraInfo(struct soap*, struct ns__CameraInfo *, const char*, const char*);

#ifndef soap_read_ns__CameraInfo
#define soap_read_ns__CameraInfo(soap, data) ( ((data) ? (soap_default_ns__CameraInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__CameraInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data), 0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( ((data) ? (soap_default_PointerToSOAP_ENV__Reason(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data), 0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( ((data) ? (soap_default_PointerToSOAP_ENV__Detail(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data), 0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( ((data) ? (soap_default_PointerToSOAP_ENV__Code(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTons__Detectinfo
#define SOAP_TYPE_PointerTons__Detectinfo (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__Detectinfo(struct soap*, struct ns__Detectinfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__Detectinfo(struct soap*, const char *, int, struct ns__Detectinfo *const*, const char *);
SOAP_FMAC3 struct ns__Detectinfo ** SOAP_FMAC4 soap_in_PointerTons__Detectinfo(struct soap*, const char*, struct ns__Detectinfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__Detectinfo(struct soap*, struct ns__Detectinfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons__Detectinfo
#define soap_write_PointerTons__Detectinfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons__Detectinfo(soap, data), 0) || soap_put_PointerTons__Detectinfo(soap, data, "ns:Detectinfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__Detectinfo ** SOAP_FMAC4 soap_get_PointerTons__Detectinfo(struct soap*, struct ns__Detectinfo **, const char*, const char*);

#ifndef soap_read_PointerTons__Detectinfo
#define soap_read_PointerTons__Detectinfo(soap, data) ( ((data) ? (soap_default_PointerTons__Detectinfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTons__Detectinfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons__StationInfo
#define SOAP_TYPE_PointerToPointerTons__StationInfo (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons__StationInfo(struct soap*, struct ns__StationInfo **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons__StationInfo(struct soap*, const char *, int, struct ns__StationInfo **const*, const char *);
SOAP_FMAC3 struct ns__StationInfo *** SOAP_FMAC4 soap_in_PointerToPointerTons__StationInfo(struct soap*, const char*, struct ns__StationInfo ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons__StationInfo(struct soap*, struct ns__StationInfo **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons__StationInfo
#define soap_write_PointerToPointerTons__StationInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToPointerTons__StationInfo(soap, data), 0) || soap_put_PointerToPointerTons__StationInfo(soap, data, "ns:StationInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__StationInfo *** SOAP_FMAC4 soap_get_PointerToPointerTons__StationInfo(struct soap*, struct ns__StationInfo ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons__StationInfo
#define soap_read_PointerToPointerTons__StationInfo(soap, data) ( ((data) ? (soap_default_PointerToPointerTons__StationInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToPointerTons__StationInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons__StationInfo
#define SOAP_TYPE_PointerTons__StationInfo (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__StationInfo(struct soap*, struct ns__StationInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__StationInfo(struct soap*, const char *, int, struct ns__StationInfo *const*, const char *);
SOAP_FMAC3 struct ns__StationInfo ** SOAP_FMAC4 soap_in_PointerTons__StationInfo(struct soap*, const char*, struct ns__StationInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__StationInfo(struct soap*, struct ns__StationInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons__StationInfo
#define soap_write_PointerTons__StationInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons__StationInfo(soap, data), 0) || soap_put_PointerTons__StationInfo(soap, data, "ns:StationInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__StationInfo ** SOAP_FMAC4 soap_get_PointerTons__StationInfo(struct soap*, struct ns__StationInfo **, const char*, const char*);

#ifndef soap_read_PointerTons__StationInfo
#define soap_read_PointerTons__StationInfo(soap, data) ( ((data) ? (soap_default_PointerTons__StationInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTons__StationInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons__ErrorTypeInfo
#define SOAP_TYPE_PointerToPointerTons__ErrorTypeInfo (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons__ErrorTypeInfo(struct soap*, struct ns__ErrorTypeInfo **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons__ErrorTypeInfo(struct soap*, const char *, int, struct ns__ErrorTypeInfo **const*, const char *);
SOAP_FMAC3 struct ns__ErrorTypeInfo *** SOAP_FMAC4 soap_in_PointerToPointerTons__ErrorTypeInfo(struct soap*, const char*, struct ns__ErrorTypeInfo ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons__ErrorTypeInfo(struct soap*, struct ns__ErrorTypeInfo **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons__ErrorTypeInfo
#define soap_write_PointerToPointerTons__ErrorTypeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToPointerTons__ErrorTypeInfo(soap, data), 0) || soap_put_PointerToPointerTons__ErrorTypeInfo(soap, data, "ns:ErrorTypeInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__ErrorTypeInfo *** SOAP_FMAC4 soap_get_PointerToPointerTons__ErrorTypeInfo(struct soap*, struct ns__ErrorTypeInfo ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons__ErrorTypeInfo
#define soap_read_PointerToPointerTons__ErrorTypeInfo(soap, data) ( ((data) ? (soap_default_PointerToPointerTons__ErrorTypeInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToPointerTons__ErrorTypeInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons__ErrorTypeInfo
#define SOAP_TYPE_PointerTons__ErrorTypeInfo (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ErrorTypeInfo(struct soap*, struct ns__ErrorTypeInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ErrorTypeInfo(struct soap*, const char *, int, struct ns__ErrorTypeInfo *const*, const char *);
SOAP_FMAC3 struct ns__ErrorTypeInfo ** SOAP_FMAC4 soap_in_PointerTons__ErrorTypeInfo(struct soap*, const char*, struct ns__ErrorTypeInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ErrorTypeInfo(struct soap*, struct ns__ErrorTypeInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons__ErrorTypeInfo
#define soap_write_PointerTons__ErrorTypeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons__ErrorTypeInfo(soap, data), 0) || soap_put_PointerTons__ErrorTypeInfo(soap, data, "ns:ErrorTypeInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__ErrorTypeInfo ** SOAP_FMAC4 soap_get_PointerTons__ErrorTypeInfo(struct soap*, struct ns__ErrorTypeInfo **, const char*, const char*);

#ifndef soap_read_PointerTons__ErrorTypeInfo
#define soap_read_PointerTons__ErrorTypeInfo(soap, data) ( ((data) ? (soap_default_PointerTons__ErrorTypeInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTons__ErrorTypeInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons__CameraInfo
#define SOAP_TYPE_PointerToPointerTons__CameraInfo (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons__CameraInfo(struct soap*, struct ns__CameraInfo **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons__CameraInfo(struct soap*, const char *, int, struct ns__CameraInfo **const*, const char *);
SOAP_FMAC3 struct ns__CameraInfo *** SOAP_FMAC4 soap_in_PointerToPointerTons__CameraInfo(struct soap*, const char*, struct ns__CameraInfo ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons__CameraInfo(struct soap*, struct ns__CameraInfo **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons__CameraInfo
#define soap_write_PointerToPointerTons__CameraInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToPointerTons__CameraInfo(soap, data), 0) || soap_put_PointerToPointerTons__CameraInfo(soap, data, "ns:CameraInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__CameraInfo *** SOAP_FMAC4 soap_get_PointerToPointerTons__CameraInfo(struct soap*, struct ns__CameraInfo ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons__CameraInfo
#define soap_read_PointerToPointerTons__CameraInfo(soap, data) ( ((data) ? (soap_default_PointerToPointerTons__CameraInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToPointerTons__CameraInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons__CameraInfo
#define SOAP_TYPE_PointerTons__CameraInfo (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__CameraInfo(struct soap*, struct ns__CameraInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__CameraInfo(struct soap*, const char *, int, struct ns__CameraInfo *const*, const char *);
SOAP_FMAC3 struct ns__CameraInfo ** SOAP_FMAC4 soap_in_PointerTons__CameraInfo(struct soap*, const char*, struct ns__CameraInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__CameraInfo(struct soap*, struct ns__CameraInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons__CameraInfo
#define soap_write_PointerTons__CameraInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons__CameraInfo(soap, data), 0) || soap_put_PointerTons__CameraInfo(soap, data, "ns:CameraInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__CameraInfo ** SOAP_FMAC4 soap_get_PointerTons__CameraInfo(struct soap*, struct ns__CameraInfo **, const char*, const char*);

#ifndef soap_read_PointerTons__CameraInfo
#define soap_read_PointerTons__CameraInfo(soap, data) ( ((data) ? (soap_default_PointerTons__CameraInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTons__CameraInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (7)
#endif

#define soap_default_xsd__string(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap*, char *const*);

#define soap_xsd__string2s soap_string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__string soap_s2string

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xsd__string
#define soap_write_xsd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__string(soap, data), 0) || soap_put_xsd__string(soap, data, "xsd:string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xsd__string
#define soap_read_xsd__string(soap, data) ( ((data) ? (soap_default_xsd__string(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xsd__string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data), 0) || soap_put__QName(soap, data, "QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( ((data) ? (soap_default__QName(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__QName(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data), 0) || soap_put_string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( ((data) ? (soap_default_string(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
